
sendBlinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005564  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005844  08005844  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005844  08005844  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800584c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa8  200001dc  08005a28  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  08005a28  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014703  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b3a  00000000  00000000  00034907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  00037448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  00038708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c16  00000000  00000000  00039870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfde  00000000  00000000  0003c486  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000883fd  00000000  00000000  0004a464  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b8  00000000  00000000  000d28dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800560c 	.word	0x0800560c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800560c 	.word	0x0800560c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	i= 1000;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <main+0x4c>)
 8000236:	22fa      	movs	r2, #250	; 0xfa
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 faea 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f82a 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f8ac 	bl	80003a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f87a 	bl	8000340 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800024c:	f002 fac6 	bl	80027dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <main+0x50>)
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0x54>)
 8000254:	2100      	movs	r1, #0
 8000256:	0018      	movs	r0, r3
 8000258:	f002 fb1a 	bl	8002890 <osThreadNew>
 800025c:	0002      	movs	r2, r0
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <main+0x58>)
 8000260:	601a      	str	r2, [r3, #0]

  /* creation of blink */
  blinkHandle = osThreadNew(StartTask02, NULL, &blink_attributes);
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <main+0x5c>)
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <main+0x60>)
 8000266:	2100      	movs	r1, #0
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fb11 	bl	8002890 <osThreadNew>
 800026e:	0002      	movs	r2, r0
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <main+0x64>)
 8000272:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000274:	f002 fade 	bl	8002834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x48>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20001b70 	.word	0x20001b70
 8000280:	0800567c 	.word	0x0800567c
 8000284:	08000475 	.word	0x08000475
 8000288:	20001b08 	.word	0x20001b08
 800028c:	080056a0 	.word	0x080056a0
 8000290:	080004ed 	.word	0x080004ed
 8000294:	20001bf8 	.word	0x20001bf8

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b099      	sub	sp, #100	; 0x64
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	242c      	movs	r4, #44	; 0x2c
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	; 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f004 fcf0 	bl	8004c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	231c      	movs	r3, #28
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	0018      	movs	r0, r3
 80002b4:	2310      	movs	r3, #16
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f004 fce8 	bl	8004c8e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	231c      	movs	r3, #28
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f004 fce1 	bl	8004c8e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2220      	movs	r2, #32
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fd0b 	bl	8000cfc <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ea:	f000 f947 	bl	800057c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	211c      	movs	r1, #28
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2203      	movs	r2, #3
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f87b 	bl	8001408 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 f931 	bl	800057c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800031a:	003b      	movs	r3, r7
 800031c:	2202      	movs	r2, #2
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000320:	003b      	movs	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fa0f 	bl	800174c <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000332:	f000 f923 	bl	800057c <Error_Handler>
  }
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b019      	add	sp, #100	; 0x64
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000346:	4a15      	ldr	r2, [pc, #84]	; (800039c <MX_USART2_UART_Init+0x5c>)
 8000348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800034c:	2296      	movs	r2, #150	; 0x96
 800034e:	0212      	lsls	r2, r2, #8
 8000350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fcfd 	bl	8001d84 <HAL_UART_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800038e:	f000 f8f5 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20001b78 	.word	0x20001b78
 800039c:	40004400 	.word	0x40004400

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	240c      	movs	r4, #12
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	0018      	movs	r0, r3
 80003ac:	2314      	movs	r3, #20
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f004 fc6c 	bl	8004c8e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b6:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003b8:	695a      	ldr	r2, [r3, #20]
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	0309      	lsls	r1, r1, #12
 80003c0:	430a      	orrs	r2, r1
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003c6:	695a      	ldr	r2, [r3, #20]
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	031b      	lsls	r3, r3, #12
 80003cc:	4013      	ands	r3, r2
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	03c9      	lsls	r1, r1, #15
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	03db      	lsls	r3, r3, #15
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003f4:	2180      	movs	r1, #128	; 0x80
 80003f6:	0289      	lsls	r1, r1, #10
 80003f8:	430a      	orrs	r2, r1
 80003fa:	615a      	str	r2, [r3, #20]
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_GPIO_Init+0xc8>)
 80003fe:	695a      	ldr	r2, [r3, #20]
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	029b      	lsls	r3, r3, #10
 8000404:	4013      	ands	r3, r2
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fc54 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000418:	193b      	adds	r3, r7, r4
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	0192      	lsls	r2, r2, #6
 800041e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000420:	193b      	adds	r3, r7, r4
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_GPIO_Init+0xcc>)
 8000424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800042c:	193b      	adds	r3, r7, r4
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0xd0>)
 8000430:	0019      	movs	r1, r3
 8000432:	0010      	movs	r0, r2
 8000434:	f000 facc 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000438:	0021      	movs	r1, r4
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2220      	movs	r2, #32
 800043e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2201      	movs	r2, #1
 8000444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000452:	187a      	adds	r2, r7, r1
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fab8 	bl	80009d0 <HAL_GPIO_Init>

}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b009      	add	sp, #36	; 0x24
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	10210000 	.word	0x10210000
 8000470:	48000800 	.word	0x48000800

08000474 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000474:	b5b0      	push	{r4, r5, r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af02      	add	r7, sp, #8
 800047a:	6078      	str	r0, [r7, #4]

    /* Infinite loop */
  for(;;)
    {

	  HAL_UART_Receive(&huart2, (uint8_t *)test, 4, HAL_MAX_DELAY);
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	4915      	ldr	r1, [pc, #84]	; (80004d8 <StartDefaultTask+0x64>)
 8000482:	4816      	ldr	r0, [pc, #88]	; (80004dc <StartDefaultTask+0x68>)
 8000484:	2204      	movs	r2, #4
 8000486:	f001 fd79 	bl	8001f7c <HAL_UART_Receive>
	  sprintf(temp, "%c%c%c%c!\r\n", test[0],test[1],test[2],test[3]);
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <StartDefaultTask+0x64>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	001c      	movs	r4, r3
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <StartDefaultTask+0x64>)
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	001d      	movs	r5, r3
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <StartDefaultTask+0x64>)
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	001a      	movs	r2, r3
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <StartDefaultTask+0x64>)
 800049e:	78db      	ldrb	r3, [r3, #3]
 80004a0:	490f      	ldr	r1, [pc, #60]	; (80004e0 <StartDefaultTask+0x6c>)
 80004a2:	4810      	ldr	r0, [pc, #64]	; (80004e4 <StartDefaultTask+0x70>)
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	002b      	movs	r3, r5
 80004aa:	0022      	movs	r2, r4
 80004ac:	f004 fbf8 	bl	8004ca0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)temp, strlen(temp), HAL_MAX_DELAY);
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <StartDefaultTask+0x70>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff fe28 	bl	8000108 <strlen>
 80004b8:	0003      	movs	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	425b      	negs	r3, r3
 80004c0:	4908      	ldr	r1, [pc, #32]	; (80004e4 <StartDefaultTask+0x70>)
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <StartDefaultTask+0x68>)
 80004c4:	f001 fcb2 	bl	8001e2c <HAL_UART_Transmit>

	  i=atoi(test);
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <StartDefaultTask+0x64>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f004 fba6 	bl	8004c1c <atoi>
 80004d0:	0002      	movs	r2, r0
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <StartDefaultTask+0x74>)
 80004d4:	601a      	str	r2, [r3, #0]
    {
 80004d6:	e7d1      	b.n	800047c <StartDefaultTask+0x8>
 80004d8:	20001b74 	.word	0x20001b74
 80004dc:	20001b78 	.word	0x20001b78
 80004e0:	08005638 	.word	0x08005638
 80004e4:	20001b0c 	.word	0x20001b0c
 80004e8:	20001b70 	.word	0x20001b70

080004ec <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  pin_state = !pin_state;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <StartTask02+0x64>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	425a      	negs	r2, r3
 80004fa:	4153      	adcs	r3, r2
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <StartTask02+0x64>)
 8000502:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pin_state);
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <StartTask02+0x64>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	2390      	movs	r3, #144	; 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2120      	movs	r1, #32
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fbd5 	bl	8000cc0 <HAL_GPIO_WritePin>
	  osDelay(i);
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <StartTask02+0x68>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	0018      	movs	r0, r3
 800051c:	f002 fa60 	bl	80029e0 <osDelay>
	  pin_state = !pin_state;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <StartTask02+0x64>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	425a      	negs	r2, r3
 8000526:	4153      	adcs	r3, r2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <StartTask02+0x64>)
 800052e:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pin_state);
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <StartTask02+0x64>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	2120      	movs	r1, #32
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fbbf 	bl	8000cc0 <HAL_GPIO_WritePin>
	  osDelay(i);
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <StartTask02+0x68>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	0018      	movs	r0, r3
 8000548:	f002 fa4a 	bl	80029e0 <osDelay>
	  pin_state = !pin_state;
 800054c:	e7d2      	b.n	80004f4 <StartTask02+0x8>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200001f8 	.word	0x200001f8
 8000554:	20001b70 	.word	0x20001b70

08000558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056a:	f000 f967 	bl	800083c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40001000 	.word	0x40001000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	2201      	movs	r2, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0549      	lsls	r1, r1, #21
 80005b0:	430a      	orrs	r2, r1
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_MspInit+0x44>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	055b      	lsls	r3, r3, #21
 80005bc:	4013      	ands	r3, r2
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	2314      	movs	r3, #20
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	0018      	movs	r0, r3
 80005de:	2314      	movs	r3, #20
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 fb53 	bl	8004c8e <memset>
  if(huart->Instance==USART2)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <HAL_UART_MspInit+0x90>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d132      	bne.n	8000658 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <HAL_UART_MspInit+0x94>)
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_UART_MspInit+0x94>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0289      	lsls	r1, r1, #10
 80005fc:	430a      	orrs	r2, r1
 80005fe:	61da      	str	r2, [r3, #28]
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	029b      	lsls	r3, r3, #10
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_UART_MspInit+0x94>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_UART_MspInit+0x94>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800062a:	2114      	movs	r1, #20
 800062c:	187b      	adds	r3, r7, r1
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	2390      	movs	r3, #144	; 0x90
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f9bc 	bl	80009d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b00a      	add	sp, #40	; 0x28
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40004400 	.word	0x40004400
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	0019      	movs	r1, r3
 800067e:	2011      	movs	r0, #17
 8000680:	f000 f980 	bl	8000984 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000684:	2011      	movs	r0, #17
 8000686:	f000 f992 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <HAL_InitTick+0xa4>)
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <HAL_InitTick+0xa4>)
 8000690:	2110      	movs	r1, #16
 8000692:	430a      	orrs	r2, r1
 8000694:	61da      	str	r2, [r3, #28]
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <HAL_InitTick+0xa4>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	2210      	movs	r2, #16
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a2:	230c      	movs	r3, #12
 80006a4:	18fa      	adds	r2, r7, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f823 	bl	80016f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006b2:	f001 f80b 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80006b6:	0003      	movs	r3, r0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	4914      	ldr	r1, [pc, #80]	; (8000710 <HAL_InitTick+0xa8>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fd2a 	bl	8000118 <__udivsi3>
 80006c4:	0003      	movs	r3, r0
 80006c6:	3b01      	subs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0xac>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_InitTick+0xb0>)
 80006ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_InitTick+0xac>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <HAL_InitTick+0xb4>)
 80006d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_InitTick+0xac>)
 80006d8:	6a3a      	ldr	r2, [r7, #32]
 80006da:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_InitTick+0xac>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_InitTick+0xac>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_InitTick+0xac>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f92e 	bl	800194c <HAL_TIM_Base_Init>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d105      	bne.n	8000700 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_InitTick+0xac>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f95c 	bl	80019b4 <HAL_TIM_Base_Start_IT>
 80006fc:	0003      	movs	r3, r0
 80006fe:	e000      	b.n	8000702 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
}
 8000702:	0018      	movs	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	b00a      	add	sp, #40	; 0x28
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000
 8000710:	000f4240 	.word	0x000f4240
 8000714:	20001bfc 	.word	0x20001bfc
 8000718:	40001000 	.word	0x40001000
 800071c:	000003e7 	.word	0x000003e7

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <TIM6_DAC_IRQHandler+0x14>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 f95e 	bl	80019f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20001bfc 	.word	0x20001bfc

08000748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <_sbrk+0x5c>)
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <_sbrk+0x60>)
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_sbrk+0x64>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <_sbrk+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d207      	bcs.n	8000788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000778:	f004 fa56 	bl	8004c28 <__errno>
 800077c:	0003      	movs	r3, r0
 800077e:	220c      	movs	r2, #12
 8000780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	e009      	b.n	800079c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	18d2      	adds	r2, r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <_sbrk+0x64>)
 8000798:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b006      	add	sp, #24
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20004000 	.word	0x20004000
 80007a8:	00000400 	.word	0x00000400
 80007ac:	200001fc 	.word	0x200001fc
 80007b0:	20001c88 	.word	0x20001c88

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490e      	ldr	r1, [pc, #56]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0b      	ldr	r4, [pc, #44]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ea:	f7ff ffe3 	bl	80007b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007ee:	f004 fa21 	bl	8004c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fd1d 	bl	8000230 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000804:	0800584c 	.word	0x0800584c
  ldr r2, =_sbss
 8000808:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800080c:	20001c84 	.word	0x20001c84

08000810 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_COMP_IRQHandler>
	...

08000814 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_Init+0x24>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_Init+0x24>)
 800081e:	2110      	movs	r1, #16
 8000820:	430a      	orrs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff ff1f 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082a:	f7ff fead 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	001a      	movs	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	18d2      	adds	r2, r2, r3
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000004 	.word	0x20000004
 800085c:	20001c3c 	.word	0x20001c3c

08000860 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20001c3c 	.word	0x20001c3c

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b7f      	cmp	r3, #127	; 0x7f
 8000886:	d809      	bhi.n	800089c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	231f      	movs	r3, #31
 8000890:	401a      	ands	r2, r3
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_EnableIRQ+0x30>)
 8000894:	2101      	movs	r1, #1
 8000896:	4091      	lsls	r1, r2
 8000898:	000a      	movs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
  }
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b7f      	cmp	r3, #127	; 0x7f
 80008bc:	d828      	bhi.n	8000910 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <__NVIC_SetPriority+0xd4>)
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	33c0      	adds	r3, #192	; 0xc0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	589b      	ldr	r3, [r3, r2]
 80008ce:	1dfa      	adds	r2, r7, #7
 80008d0:	7812      	ldrb	r2, [r2, #0]
 80008d2:	0011      	movs	r1, r2
 80008d4:	2203      	movs	r2, #3
 80008d6:	400a      	ands	r2, r1
 80008d8:	00d2      	lsls	r2, r2, #3
 80008da:	21ff      	movs	r1, #255	; 0xff
 80008dc:	4091      	lsls	r1, r2
 80008de:	000a      	movs	r2, r1
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	401a      	ands	r2, r3
 80008e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	22ff      	movs	r2, #255	; 0xff
 80008ec:	401a      	ands	r2, r3
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0018      	movs	r0, r3
 80008f4:	2303      	movs	r3, #3
 80008f6:	4003      	ands	r3, r0
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	481f      	ldr	r0, [pc, #124]	; (800097c <__NVIC_SetPriority+0xd4>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	089b      	lsrs	r3, r3, #2
 8000906:	430a      	orrs	r2, r1
 8000908:	33c0      	adds	r3, #192	; 0xc0
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800090e:	e031      	b.n	8000974 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <__NVIC_SetPriority+0xd8>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0019      	movs	r1, r3
 8000918:	230f      	movs	r3, #15
 800091a:	400b      	ands	r3, r1
 800091c:	3b08      	subs	r3, #8
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3306      	adds	r3, #6
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1dfa      	adds	r2, r7, #7
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	0011      	movs	r1, r2
 8000930:	2203      	movs	r2, #3
 8000932:	400a      	ands	r2, r1
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	21ff      	movs	r1, #255	; 0xff
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	401a      	ands	r2, r3
 8000940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	019b      	lsls	r3, r3, #6
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	401a      	ands	r2, r3
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	0018      	movs	r0, r3
 8000950:	2303      	movs	r3, #3
 8000952:	4003      	ands	r3, r0
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <__NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	001c      	movs	r4, r3
 8000960:	230f      	movs	r3, #15
 8000962:	4023      	ands	r3, r4
 8000964:	3b08      	subs	r3, #8
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	430a      	orrs	r2, r1
 800096a:	3306      	adds	r3, #6
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	18c3      	adds	r3, r0, r3
 8000970:	3304      	adds	r3, #4
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b003      	add	sp, #12
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	210f      	movs	r1, #15
 8000990:	187b      	adds	r3, r7, r1
 8000992:	1c02      	adds	r2, r0, #0
 8000994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff81 	bl	80008a8 <__NVIC_SetPriority>
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	0002      	movs	r2, r0
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff57 	bl	8000874 <__NVIC_EnableIRQ>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e155      	b.n	8000c8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x28>
 80009f6:	e146      	b.n	8000c86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d00b      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d007      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	2b11      	cmp	r3, #17
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b12      	cmp	r3, #18
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	409a      	lsls	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	2201      	movs	r2, #1
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0xea>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d123      	bne.n	8000b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	58d3      	ldr	r3, [r2, r3]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2207      	movs	r2, #7
 8000acc:	4013      	ands	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2107      	movs	r1, #7
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	6939      	ldr	r1, [r7, #16]
 8000b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	401a      	ands	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	055b      	lsls	r3, r3, #21
 8000b3e:	4013      	ands	r3, r2
 8000b40:	d100      	bne.n	8000b44 <HAL_GPIO_Init+0x174>
 8000b42:	e0a0      	b.n	8000c86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	619a      	str	r2, [r3, #24]
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4013      	ands	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5c:	4a52      	ldr	r2, [pc, #328]	; (8000ca8 <HAL_GPIO_Init+0x2d8>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	589b      	ldr	r3, [r3, r2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	409a      	lsls	r2, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	2390      	movs	r3, #144	; 0x90
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0x1ea>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <HAL_GPIO_Init+0x2e0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x1e6>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <HAL_GPIO_Init+0x2e4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x1e2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a44      	ldr	r2, [pc, #272]	; (8000cb8 <HAL_GPIO_Init+0x2e8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x1de>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e008      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e004      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e002      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x1f0>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	4093      	lsls	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd0:	4935      	ldr	r1, [pc, #212]	; (8000ca8 <HAL_GPIO_Init+0x2d8>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	025b      	lsls	r3, r3, #9
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	035b      	lsls	r3, r3, #13
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	039b      	lsls	r3, r3, #14
 8000c74:	4013      	ands	r3, r2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_GPIO_Init+0x2ec>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	40da      	lsrs	r2, r3
 8000c94:	1e13      	subs	r3, r2, #0
 8000c96:	d000      	beq.n	8000c9a <HAL_GPIO_Init+0x2ca>
 8000c98:	e6a2      	b.n	80009e0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b006      	add	sp, #24
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	0008      	movs	r0, r1
 8000cca:	0011      	movs	r1, r2
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	1c0a      	adds	r2, r1, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	1c7b      	adds	r3, r7, #1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f000 fb76 	bl	80013fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2201      	movs	r2, #1
 8000d16:	4013      	ands	r3, r2
 8000d18:	d100      	bne.n	8000d1c <HAL_RCC_OscConfig+0x20>
 8000d1a:	e08e      	b.n	8000e3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d1c:	4bc5      	ldr	r3, [pc, #788]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	220c      	movs	r2, #12
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00e      	beq.n	8000d46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4bc2      	ldr	r3, [pc, #776]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d117      	bne.n	8000d64 <HAL_RCC_OscConfig+0x68>
 8000d34:	4bbf      	ldr	r3, [pc, #764]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	23c0      	movs	r3, #192	; 0xc0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	025b      	lsls	r3, r3, #9
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d10e      	bne.n	8000d64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d46:	4bbb      	ldr	r3, [pc, #748]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_RCC_OscConfig+0x58>
 8000d52:	e071      	b.n	8000e38 <HAL_RCC_OscConfig+0x13c>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d000      	beq.n	8000d5e <HAL_RCC_OscConfig+0x62>
 8000d5c:	e06c      	b.n	8000e38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f000 fb4c 	bl	80013fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d107      	bne.n	8000d7c <HAL_RCC_OscConfig+0x80>
 8000d6c:	4bb1      	ldr	r3, [pc, #708]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4bb0      	ldr	r3, [pc, #704]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e02f      	b.n	8000ddc <HAL_RCC_OscConfig+0xe0>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10c      	bne.n	8000d9e <HAL_RCC_OscConfig+0xa2>
 8000d84:	4bab      	ldr	r3, [pc, #684]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4baa      	ldr	r3, [pc, #680]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	49ab      	ldr	r1, [pc, #684]	; (8001038 <HAL_RCC_OscConfig+0x33c>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	4ba8      	ldr	r3, [pc, #672]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4ba7      	ldr	r3, [pc, #668]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000d96:	49a9      	ldr	r1, [pc, #676]	; (800103c <HAL_RCC_OscConfig+0x340>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e01e      	b.n	8000ddc <HAL_RCC_OscConfig+0xe0>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d10e      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xc8>
 8000da6:	4ba3      	ldr	r3, [pc, #652]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4ba2      	ldr	r3, [pc, #648]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	02c9      	lsls	r1, r1, #11
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	4b9f      	ldr	r3, [pc, #636]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b9e      	ldr	r3, [pc, #632]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0249      	lsls	r1, r1, #9
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xe0>
 8000dc4:	4b9b      	ldr	r3, [pc, #620]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b9a      	ldr	r3, [pc, #616]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dca:	499b      	ldr	r1, [pc, #620]	; (8001038 <HAL_RCC_OscConfig+0x33c>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	4b98      	ldr	r3, [pc, #608]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b97      	ldr	r3, [pc, #604]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	4999      	ldr	r1, [pc, #612]	; (800103c <HAL_RCC_OscConfig+0x340>)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d014      	beq.n	8000e0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fd3c 	bl	8000860 <HAL_GetTick>
 8000de8:	0003      	movs	r3, r0
 8000dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dee:	f7ff fd37 	bl	8000860 <HAL_GetTick>
 8000df2:	0002      	movs	r2, r0
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b64      	cmp	r3, #100	; 0x64
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e2fd      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	029b      	lsls	r3, r3, #10
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0xf2>
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fd27 	bl	8000860 <HAL_GetTick>
 8000e12:	0003      	movs	r3, r0
 8000e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fd22 	bl	8000860 <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e2e8      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2a:	4b82      	ldr	r3, [pc, #520]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	029b      	lsls	r3, r3, #10
 8000e32:	4013      	ands	r3, r2
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x11c>
 8000e36:	e000      	b.n	8000e3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	d100      	bne.n	8000e46 <HAL_RCC_OscConfig+0x14a>
 8000e44:	e06c      	b.n	8000f20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e46:	4b7b      	ldr	r3, [pc, #492]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d00e      	beq.n	8000e6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e50:	4b78      	ldr	r3, [pc, #480]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	220c      	movs	r2, #12
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d11f      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1a0>
 8000e5c:	4b75      	ldr	r3, [pc, #468]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	23c0      	movs	r3, #192	; 0xc0
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	401a      	ands	r2, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d116      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	4b71      	ldr	r3, [pc, #452]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2202      	movs	r2, #2
 8000e74:	4013      	ands	r3, r2
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_OscConfig+0x188>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d001      	beq.n	8000e84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e2bb      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	22f8      	movs	r2, #248	; 0xf8
 8000e8a:	4393      	bics	r3, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	4b67      	ldr	r3, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	e041      	b.n	8000f20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d024      	beq.n	8000eee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	4b63      	ldr	r3, [pc, #396]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b62      	ldr	r3, [pc, #392]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fcd6 	bl	8000860 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fcd1 	bl	8000860 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e297      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b59      	ldr	r3, [pc, #356]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d0f1      	beq.n	8000eba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	22f8      	movs	r2, #248	; 0xf8
 8000edc:	4393      	bics	r3, r2
 8000ede:	0019      	movs	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	00da      	lsls	r2, r3, #3
 8000ee6:	4b53      	ldr	r3, [pc, #332]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e018      	b.n	8000f20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b50      	ldr	r3, [pc, #320]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fcb1 	bl	8000860 <HAL_GetTick>
 8000efe:	0003      	movs	r3, r0
 8000f00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f04:	f7ff fcac 	bl	8000860 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e272      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d1f1      	bne.n	8000f04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2208      	movs	r2, #8
 8000f26:	4013      	ands	r3, r2
 8000f28:	d036      	beq.n	8000f98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d019      	beq.n	8000f66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f36:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fc8f 	bl	8000860 <HAL_GetTick>
 8000f42:	0003      	movs	r3, r0
 8000f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fc8a 	bl	8000860 <HAL_GetTick>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e250      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4013      	ands	r3, r2
 8000f62:	d0f1      	beq.n	8000f48 <HAL_RCC_OscConfig+0x24c>
 8000f64:	e018      	b.n	8000f98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f66:	4b33      	ldr	r3, [pc, #204]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	438a      	bics	r2, r1
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fc75 	bl	8000860 <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc70 	bl	8000860 <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e236      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d1f1      	bne.n	8000f7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d100      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2a8>
 8000fa2:	e0b5      	b.n	8001110 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa4:	231f      	movs	r3, #31
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fae:	69da      	ldr	r2, [r3, #28]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	055b      	lsls	r3, r3, #21
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d111      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	0549      	lsls	r1, r1, #21
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	61da      	str	r2, [r3, #28]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	055b      	lsls	r3, r3, #21
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fd4:	231f      	movs	r3, #31
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_RCC_OscConfig+0x344>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d11a      	bne.n	800101e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_RCC_OscConfig+0x344>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_RCC_OscConfig+0x344>)
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	0049      	lsls	r1, r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fc33 	bl	8000860 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001000:	f7ff fc2e 	bl	8000860 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1f4      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_RCC_OscConfig+0x344>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4013      	ands	r3, r2
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10e      	bne.n	8001044 <HAL_RCC_OscConfig+0x348>
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8001028:	6a1a      	ldr	r2, [r3, #32]
 800102a:	4b02      	ldr	r3, [pc, #8]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	621a      	str	r2, [r3, #32]
 8001032:	e035      	b.n	80010a0 <HAL_RCC_OscConfig+0x3a4>
 8001034:	40021000 	.word	0x40021000
 8001038:	fffeffff 	.word	0xfffeffff
 800103c:	fffbffff 	.word	0xfffbffff
 8001040:	40007000 	.word	0x40007000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x36a>
 800104c:	4bca      	ldr	r3, [pc, #808]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4bc9      	ldr	r3, [pc, #804]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	621a      	str	r2, [r3, #32]
 8001058:	4bc7      	ldr	r3, [pc, #796]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4bc6      	ldr	r3, [pc, #792]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800105e:	2104      	movs	r1, #4
 8001060:	438a      	bics	r2, r1
 8001062:	621a      	str	r2, [r3, #32]
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0x3a4>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x38c>
 800106e:	4bc2      	ldr	r3, [pc, #776]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	4bc1      	ldr	r3, [pc, #772]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001074:	2104      	movs	r1, #4
 8001076:	430a      	orrs	r2, r1
 8001078:	621a      	str	r2, [r3, #32]
 800107a:	4bbf      	ldr	r3, [pc, #764]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	4bbe      	ldr	r3, [pc, #760]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001080:	2101      	movs	r1, #1
 8001082:	430a      	orrs	r2, r1
 8001084:	621a      	str	r2, [r3, #32]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0x3a4>
 8001088:	4bbb      	ldr	r3, [pc, #748]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4bba      	ldr	r3, [pc, #744]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800108e:	2101      	movs	r1, #1
 8001090:	438a      	bics	r2, r1
 8001092:	621a      	str	r2, [r3, #32]
 8001094:	4bb8      	ldr	r3, [pc, #736]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	4bb7      	ldr	r3, [pc, #732]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800109a:	2104      	movs	r1, #4
 800109c:	438a      	bics	r2, r1
 800109e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d014      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fbda 	bl	8000860 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	e009      	b.n	80010c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fbd5 	bl	8000860 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	4aaf      	ldr	r2, [pc, #700]	; (800137c <HAL_RCC_OscConfig+0x680>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e19a      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c6:	4bac      	ldr	r3, [pc, #688]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3b6>
 80010d0:	e013      	b.n	80010fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fbc5 	bl	8000860 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010da:	e009      	b.n	80010f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f7ff fbc0 	bl	8000860 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4aa5      	ldr	r2, [pc, #660]	; (800137c <HAL_RCC_OscConfig+0x680>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e185      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	4ba1      	ldr	r3, [pc, #644]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	2202      	movs	r2, #2
 80010f6:	4013      	ands	r3, r2
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010fa:	231f      	movs	r3, #31
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001104:	4b9c      	ldr	r3, [pc, #624]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4b9b      	ldr	r3, [pc, #620]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800110a:	499d      	ldr	r1, [pc, #628]	; (8001380 <HAL_RCC_OscConfig+0x684>)
 800110c:	400a      	ands	r2, r1
 800110e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2210      	movs	r2, #16
 8001116:	4013      	ands	r3, r2
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d12a      	bne.n	8001178 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001122:	4b95      	ldr	r3, [pc, #596]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001126:	4b94      	ldr	r3, [pc, #592]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001128:	2104      	movs	r1, #4
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800112e:	4b92      	ldr	r3, [pc, #584]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001132:	4b91      	ldr	r3, [pc, #580]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fb91 	bl	8000860 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001144:	f7ff fb8c 	bl	8000860 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e152      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001160:	4b85      	ldr	r3, [pc, #532]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	22f8      	movs	r2, #248	; 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
 8001176:	e034      	b.n	80011e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	3305      	adds	r3, #5
 800117e:	d111      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001180:	4b7d      	ldr	r3, [pc, #500]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001186:	2104      	movs	r1, #4
 8001188:	438a      	bics	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800118c:	4b7a      	ldr	r3, [pc, #488]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001190:	22f8      	movs	r2, #248	; 0xf8
 8001192:	4393      	bics	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	00da      	lsls	r2, r3, #3
 800119c:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
 80011a2:	e01e      	b.n	80011e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011a4:	4b74      	ldr	r3, [pc, #464]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a8:	4b73      	ldr	r3, [pc, #460]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	2104      	movs	r1, #4
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011b0:	4b71      	ldr	r3, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b4:	4b70      	ldr	r3, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	438a      	bics	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fb50 	bl	8000860 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011c6:	f7ff fb4b 	bl	8000860 <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e111      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011d8:	4b67      	ldr	r3, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d1f1      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2220      	movs	r2, #32
 80011e8:	4013      	ands	r3, r2
 80011ea:	d05c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011ec:	4b62      	ldr	r3, [pc, #392]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	220c      	movs	r2, #12
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d00e      	beq.n	8001216 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011f8:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	220c      	movs	r2, #12
 80011fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001200:	2b08      	cmp	r3, #8
 8001202:	d114      	bne.n	800122e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001204:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	401a      	ands	r2, r3
 800120e:	23c0      	movs	r3, #192	; 0xc0
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	429a      	cmp	r2, r3
 8001214:	d10b      	bne.n	800122e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	4013      	ands	r3, r2
 8001220:	d040      	beq.n	80012a4 <HAL_RCC_OscConfig+0x5a8>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d03c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0e6      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01b      	beq.n	800126e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0249      	lsls	r1, r1, #9
 8001240:	430a      	orrs	r2, r1
 8001242:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fb0c 	bl	8000860 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800124e:	f7ff fb07 	bl	8000860 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0cd      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x552>
 800126c:	e01b      	b.n	80012a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001274:	4943      	ldr	r1, [pc, #268]	; (8001384 <HAL_RCC_OscConfig+0x688>)
 8001276:	400a      	ands	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff faf1 	bl	8000860 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001284:	f7ff faec 	bl	8000860 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0b2      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x588>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5b4>
 80012ae:	e0a4      	b.n	80013fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x5c2>
 80012bc:	e078      	b.n	80013b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d14c      	bne.n	8001360 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80012cc:	492e      	ldr	r1, [pc, #184]	; (8001388 <HAL_RCC_OscConfig+0x68c>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fac5 	bl	8000860 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fac0 	bl	8000860 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e086      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	049b      	lsls	r3, r3, #18
 80012f6:	4013      	ands	r3, r2
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	220f      	movs	r2, #15
 8001300:	4393      	bics	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_RCC_OscConfig+0x690>)
 8001314:	4013      	ands	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	431a      	orrs	r2, r3
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001324:	430a      	orrs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	0449      	lsls	r1, r1, #17
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fa93 	bl	8000860 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fa8e 	bl	8000860 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e054      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	049b      	lsls	r3, r3, #18
 800135a:	4013      	ands	r3, r2
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x644>
 800135e:	e04c      	b.n	80013fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_RCC_OscConfig+0x67c>)
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <HAL_RCC_OscConfig+0x68c>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fa78 	bl	8000860 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x6a6>
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40021000 	.word	0x40021000
 800137c:	00001388 	.word	0x00001388
 8001380:	efffffff 	.word	0xefffffff
 8001384:	fffeffff 	.word	0xfffeffff
 8001388:	feffffff 	.word	0xfeffffff
 800138c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fa66 	bl	8000860 <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e02c      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_RCC_OscConfig+0x708>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	049b      	lsls	r3, r3, #18
 80013aa:	4013      	ands	r3, r2
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x694>
 80013ae:	e024      	b.n	80013fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e01f      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_RCC_OscConfig+0x708>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_RCC_OscConfig+0x708>)
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	025b      	lsls	r3, r3, #9
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10e      	bne.n	80013f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	220f      	movs	r2, #15
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	23f0      	movs	r3, #240	; 0xf0
 80013ea:	039b      	lsls	r3, r3, #14
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b008      	add	sp, #32
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0bf      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d911      	bls.n	800144e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4393      	bics	r3, r2
 8001432:	0019      	movs	r1, r3
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d001      	beq.n	800144e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0a6      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d015      	beq.n	8001484 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2204      	movs	r2, #4
 800145e:	4013      	ands	r3, r2
 8001460:	d006      	beq.n	8001470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001468:	21e0      	movs	r1, #224	; 0xe0
 800146a:	00c9      	lsls	r1, r1, #3
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	22f0      	movs	r2, #240	; 0xf0
 8001476:	4393      	bics	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d04c      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	029b      	lsls	r3, r3, #10
 800149e:	4013      	ands	r3, r2
 80014a0:	d120      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07a      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	049b      	lsls	r3, r3, #18
 80014b6:	4013      	ands	r3, r2
 80014b8:	d114      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e06e      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e062      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e05b      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4393      	bics	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff f9b2 	bl	8000860 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001500:	e009      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7ff f9ad 	bl	8000860 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_RCC_ClockConfig+0x1a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e042      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	220c      	movs	r2, #12
 800151c:	401a      	ands	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1ec      	bne.n	8001502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d211      	bcs.n	800155a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4393      	bics	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_RCC_ClockConfig+0x19c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d001      	beq.n	800155a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e020      	b.n	800159c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d009      	beq.n	8001578 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_RCC_ClockConfig+0x1a8>)
 800156a:	4013      	ands	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001578:	f000 f820 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 800157c:	0001      	movs	r1, r0
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	220f      	movs	r2, #15
 8001586:	4013      	ands	r3, r2
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x1ac>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	000a      	movs	r2, r1
 800158e:	40da      	lsrs	r2, r3
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001592:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff f867 	bl	8000668 <HAL_InitTick>
  
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	00001388 	.word	0x00001388
 80015b0:	fffff8ff 	.word	0xfffff8ff
 80015b4:	080056c4 	.word	0x080056c4
 80015b8:	20000000 	.word	0x20000000

080015bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08f      	sub	sp, #60	; 0x3c
 80015c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015c2:	2314      	movs	r3, #20
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	4a37      	ldr	r2, [pc, #220]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80015c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015ca:	c313      	stmia	r3!, {r0, r1, r4}
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4a35      	ldr	r2, [pc, #212]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xec>)
 80015d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015d6:	c313      	stmia	r3!, {r0, r1, r4}
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_RCC_GetSysClockFreq+0xf0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	220c      	movs	r2, #12
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d006      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x52>
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d043      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0xd0>
 8001604:	2b04      	cmp	r3, #4
 8001606:	d144      	bne.n	8001692 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800160c:	e044      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	220f      	movs	r2, #15
 8001614:	4013      	ands	r3, r2
 8001616:	2214      	movs	r2, #20
 8001618:	18ba      	adds	r2, r7, r2
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_RCC_GetSysClockFreq+0xf0>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	220f      	movs	r2, #15
 8001624:	4013      	ands	r3, r2
 8001626:	1d3a      	adds	r2, r7, #4
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800162c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162e:	23c0      	movs	r3, #192	; 0xc0
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	401a      	ands	r2, r3
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d109      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800163c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001640:	f7fe fd6a 	bl	8000118 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	001a      	movs	r2, r3
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	4353      	muls	r3, r2
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e01a      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	401a      	ands	r2, r3
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	429a      	cmp	r2, r3
 800165e:	d109      	bne.n	8001674 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001664:	f7fe fd58 	bl	8000118 <__udivsi3>
 8001668:	0003      	movs	r3, r0
 800166a:	001a      	movs	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	4353      	muls	r3, r2
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
 8001672:	e008      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001678:	f7fe fd4e 	bl	8000118 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	4353      	muls	r3, r2
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800168a:	e005      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001690:	e002      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001696:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b00f      	add	sp, #60	; 0x3c
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	08005644 	.word	0x08005644
 80016a8:	08005654 	.word	0x08005654
 80016ac:	40021000 	.word	0x40021000
 80016b0:	007a1200 	.word	0x007a1200
 80016b4:	02dc6c00 	.word	0x02dc6c00

080016b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	20000000 	.word	0x20000000

080016cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016d0:	f7ff fff2 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d4:	0001      	movs	r1, r0
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	2207      	movs	r2, #7
 80016de:	4013      	ands	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	40d9      	lsrs	r1, r3
 80016e6:	000b      	movs	r3, r1
}    
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080056d4 	.word	0x080056d4

080016f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_RCC_GetClockConfig+0x4c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2203      	movs	r2, #3
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_GetClockConfig+0x4c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	22f0      	movs	r2, #240	; 0xf0
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_RCC_GetClockConfig+0x4c>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	23e0      	movs	r3, #224	; 0xe0
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_GetClockConfig+0x50>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	401a      	ands	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001768:	e08f      	b.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2317      	movs	r3, #23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	055b      	lsls	r3, r3, #21
 800177a:	4013      	ands	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0549      	lsls	r1, r1, #21
 8001788:	430a      	orrs	r2, r1
 800178a:	61da      	str	r2, [r3, #28]
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b64      	ldr	r3, [pc, #400]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	d11a      	bne.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b60      	ldr	r3, [pc, #384]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0049      	lsls	r1, r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f850 	bl	8000860 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff f84b 	bl	8000860 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0a6      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b56      	ldr	r3, [pc, #344]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	23c0      	movs	r3, #192	; 0xc0
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d034      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	429a      	cmp	r2, r3
 8001804:	d02c      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0249      	lsls	r1, r1, #9
 800181a:	430a      	orrs	r2, r1
 800181c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001824:	4945      	ldr	r1, [pc, #276]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001826:	400a      	ands	r2, r1
 8001828:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f812 	bl	8000860 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e009      	b.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff f80d 	bl	8000860 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e067      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d0f0      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001870:	430a      	orrs	r2, r1
 8001872:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001874:	2317      	movs	r3, #23
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001884:	492f      	ldr	r1, [pc, #188]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001886:	400a      	ands	r2, r1
 8001888:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2201      	movs	r2, #1
 8001890:	4013      	ands	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	2203      	movs	r2, #3
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2202      	movs	r2, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	d009      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2220      	movs	r2, #32
 80018cc:	4013      	ands	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	2210      	movs	r2, #16
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	4393      	bics	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001900:	430a      	orrs	r2, r1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d009      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	4393      	bics	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001920:	430a      	orrs	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b006      	add	sp, #24
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	fffffcff 	.word	0xfffffcff
 800193c:	fffeffff 	.word	0xfffeffff
 8001940:	00001388 	.word	0x00001388
 8001944:	efffffff 	.word	0xefffffff
 8001948:	fffcffff 	.word	0xfffcffff

0800194c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e01e      	b.n	800199c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	223d      	movs	r2, #61	; 0x3d
 8001962:	5c9b      	ldrb	r3, [r3, r2]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	223c      	movs	r2, #60	; 0x3c
 800196e:	2100      	movs	r1, #0
 8001970:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f815 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	223d      	movs	r2, #61	; 0x3d
 800197e:	2102      	movs	r1, #2
 8001980:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	0019      	movs	r1, r3
 800198c:	0010      	movs	r0, r2
 800198e:	f000 f969 	bl	8001c64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	223d      	movs	r2, #61	; 0x3d
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d007      	beq.n	80019ee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b004      	add	sp, #16
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d124      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d11d      	bne.n	8001a58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4252      	negs	r2, r2
 8001a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2203      	movs	r2, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f8fa 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e007      	b.n	8001a52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f8ed 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f8f9 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d125      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d11e      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	4252      	negs	r2, r2
 8001a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 f8cd 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001a9a:	e007      	b.n	8001aac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 f8c0 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f8cc 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d124      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11d      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2209      	movs	r2, #9
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2204      	movs	r2, #4
 8001adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 f8a1 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001af2:	e007      	b.n	8001b04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f894 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 f8a0 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d125      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d11e      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2211      	movs	r2, #17
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2208      	movs	r2, #8
 8001b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d004      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f874 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e007      	b.n	8001b5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 f867 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f873 	bl	8001c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10f      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d108      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4252      	negs	r2, r2
 8001b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fce3 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b80      	cmp	r3, #128	; 0x80
 8001bac:	d108      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2281      	movs	r2, #129	; 0x81
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8da 	bl	8001d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d10f      	bne.n	8001bee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d108      	bne.n	8001bee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2241      	movs	r2, #65	; 0x41
 8001be2:	4252      	negs	r2, r2
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f833 	bl	8001c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d10f      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d108      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	4252      	negs	r2, r2
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f8a4 	bl	8001d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <TIM_Base_SetConfig+0xe4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d008      	beq.n	8001c8e <TIM_Base_SetConfig+0x2a>
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	05db      	lsls	r3, r3, #23
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d003      	beq.n	8001c8e <TIM_Base_SetConfig+0x2a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <TIM_Base_SetConfig+0xe8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d108      	bne.n	8001ca0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2270      	movs	r2, #112	; 0x70
 8001c92:	4393      	bics	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <TIM_Base_SetConfig+0xe4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d018      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	05db      	lsls	r3, r3, #23
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d013      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <TIM_Base_SetConfig+0xe8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00f      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <TIM_Base_SetConfig+0xec>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00b      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <TIM_Base_SetConfig+0xf0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <TIM_Base_SetConfig+0xf4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d003      	beq.n	8001cda <TIM_Base_SetConfig+0x76>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <TIM_Base_SetConfig+0xf8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d108      	bne.n	8001cec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <TIM_Base_SetConfig+0xfc>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <TIM_Base_SetConfig+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0xce>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <TIM_Base_SetConfig+0xf0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0xce>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <TIM_Base_SetConfig+0xf4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0xce>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <TIM_Base_SetConfig+0xf8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d103      	bne.n	8001d3a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	615a      	str	r2, [r3, #20]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40002000 	.word	0x40002000
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40014400 	.word	0x40014400
 8001d5c:	40014800 	.word	0x40014800
 8001d60:	fffffcff 	.word	0xfffffcff

08001d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e044      	b.n	8001e20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2270      	movs	r2, #112	; 0x70
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7fe fc11 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2224      	movs	r2, #36	; 0x24
 8001db2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 f9c4 	bl	8002154 <UART_SetConfig>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e024      	b.n	8001e20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 fb83 	bl	80024ec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	490d      	ldr	r1, [pc, #52]	; (8001e28 <HAL_UART_Init+0xa4>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	212a      	movs	r1, #42	; 0x2a
 8001e02:	438a      	bics	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fc1b 	bl	8002654 <UART_CheckIdleState>
 8001e1e:	0003      	movs	r3, r0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	ffffb7ff 	.word	0xffffb7ff

08001e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d000      	beq.n	8001e46 <HAL_UART_Transmit+0x1a>
 8001e44:	e095      	b.n	8001f72 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_UART_Transmit+0x28>
 8001e4c:	1dbb      	adds	r3, r7, #6
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e08d      	b.n	8001f74 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	015b      	lsls	r3, r3, #5
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d109      	bne.n	8001e78 <HAL_UART_Transmit+0x4c>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e07d      	b.n	8001f74 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2270      	movs	r2, #112	; 0x70
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_UART_Transmit+0x5a>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e076      	b.n	8001f74 <HAL_UART_Transmit+0x148>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2270      	movs	r2, #112	; 0x70
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2221      	movs	r2, #33	; 0x21
 8001e98:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001e9a:	f7fe fce1 	bl	8000860 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1dba      	adds	r2, r7, #6
 8001ea6:	2150      	movs	r1, #80	; 0x50
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1dba      	adds	r2, r7, #6
 8001eb0:	2152      	movs	r1, #82	; 0x52
 8001eb2:	8812      	ldrh	r2, [r2, #0]
 8001eb4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	015b      	lsls	r3, r3, #5
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d108      	bne.n	8001ed4 <HAL_UART_Transmit+0xa8>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e003      	b.n	8001edc <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001edc:	e02d      	b.n	8001f3a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	f000 fbf8 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e03d      	b.n	8001f74 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	05d2      	lsls	r2, r2, #23
 8001f08:	0dd2      	lsrs	r2, r2, #23
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3302      	adds	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e008      	b.n	8001f28 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2252      	movs	r2, #82	; 0x52
 8001f2c:	5a9b      	ldrh	r3, [r3, r2]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b299      	uxth	r1, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2252      	movs	r2, #82	; 0x52
 8001f38:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2252      	movs	r2, #82	; 0x52
 8001f3e:	5a9b      	ldrh	r3, [r3, r2]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1cb      	bne.n	8001ede <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	0013      	movs	r3, r2
 8001f50:	2200      	movs	r2, #0
 8001f52:	2140      	movs	r1, #64	; 0x40
 8001f54:	f000 fbc4 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e009      	b.n	8001f74 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2270      	movs	r2, #112	; 0x70
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
  }
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b008      	add	sp, #32
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d000      	beq.n	8001f96 <HAL_UART_Receive+0x1a>
 8001f94:	e0d6      	b.n	8002144 <HAL_UART_Receive+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_UART_Receive+0x28>
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0ce      	b.n	8002146 <HAL_UART_Receive+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d109      	bne.n	8001fc8 <HAL_UART_Receive+0x4c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0be      	b.n	8002146 <HAL_UART_Receive+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2270      	movs	r2, #112	; 0x70
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Receive+0x5a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0b7      	b.n	8002146 <HAL_UART_Receive+0x1ca>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2270      	movs	r2, #112	; 0x70
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2222      	movs	r2, #34	; 0x22
 8001fe8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001fea:	f7fe fc39 	bl	8000860 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1dba      	adds	r2, r7, #6
 8001ff6:	2158      	movs	r1, #88	; 0x58
 8001ff8:	8812      	ldrh	r2, [r2, #0]
 8001ffa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1dba      	adds	r2, r7, #6
 8002000:	215a      	movs	r1, #90	; 0x5a
 8002002:	8812      	ldrh	r2, [r2, #0]
 8002004:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	429a      	cmp	r2, r3
 8002010:	d10d      	bne.n	800202e <HAL_UART_Receive+0xb2>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d104      	bne.n	8002024 <HAL_UART_Receive+0xa8>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	225c      	movs	r2, #92	; 0x5c
 800201e:	494c      	ldr	r1, [pc, #304]	; (8002150 <HAL_UART_Receive+0x1d4>)
 8002020:	5299      	strh	r1, [r3, r2]
 8002022:	e02e      	b.n	8002082 <HAL_UART_Receive+0x106>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	225c      	movs	r2, #92	; 0x5c
 8002028:	21ff      	movs	r1, #255	; 0xff
 800202a:	5299      	strh	r1, [r3, r2]
 800202c:	e029      	b.n	8002082 <HAL_UART_Receive+0x106>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_UART_Receive+0xd6>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_UART_Receive+0xcc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	225c      	movs	r2, #92	; 0x5c
 8002042:	21ff      	movs	r1, #255	; 0xff
 8002044:	5299      	strh	r1, [r3, r2]
 8002046:	e01c      	b.n	8002082 <HAL_UART_Receive+0x106>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	225c      	movs	r2, #92	; 0x5c
 800204c:	217f      	movs	r1, #127	; 0x7f
 800204e:	5299      	strh	r1, [r3, r2]
 8002050:	e017      	b.n	8002082 <HAL_UART_Receive+0x106>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	055b      	lsls	r3, r3, #21
 800205a:	429a      	cmp	r2, r3
 800205c:	d10d      	bne.n	800207a <HAL_UART_Receive+0xfe>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_UART_Receive+0xf4>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	225c      	movs	r2, #92	; 0x5c
 800206a:	217f      	movs	r1, #127	; 0x7f
 800206c:	5299      	strh	r1, [r3, r2]
 800206e:	e008      	b.n	8002082 <HAL_UART_Receive+0x106>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	225c      	movs	r2, #92	; 0x5c
 8002074:	213f      	movs	r1, #63	; 0x3f
 8002076:	5299      	strh	r1, [r3, r2]
 8002078:	e003      	b.n	8002082 <HAL_UART_Receive+0x106>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	225c      	movs	r2, #92	; 0x5c
 800207e:	2100      	movs	r1, #0
 8002080:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002082:	2312      	movs	r3, #18
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	215c      	movs	r1, #92	; 0x5c
 800208a:	5a52      	ldrh	r2, [r2, r1]
 800208c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	429a      	cmp	r2, r3
 8002098:	d108      	bne.n	80020ac <HAL_UART_Receive+0x130>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d104      	bne.n	80020ac <HAL_UART_Receive+0x130>
    {
      pdata8bits  = NULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	e003      	b.n	80020b4 <HAL_UART_Receive+0x138>
    }
    else
    {
      pdata8bits  = pData;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80020b4:	e037      	b.n	8002126 <HAL_UART_Receive+0x1aa>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	0013      	movs	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	2120      	movs	r1, #32
 80020c4:	f000 fb0c 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_Receive+0x154>
      {
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03a      	b.n	8002146 <HAL_UART_Receive+0x1ca>
      }
      if (pdata8bits == NULL)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_UART_Receive+0x178>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2212      	movs	r2, #18
 80020e0:	18ba      	adds	r2, r7, r2
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	3302      	adds	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e00f      	b.n	8002114 <HAL_UART_Receive+0x198>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2212      	movs	r2, #18
 8002100:	18ba      	adds	r2, r7, r2
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	4013      	ands	r3, r2
 8002108:	b2da      	uxtb	r2, r3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	225a      	movs	r2, #90	; 0x5a
 8002118:	5a9b      	ldrh	r3, [r3, r2]
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b299      	uxth	r1, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	225a      	movs	r2, #90	; 0x5a
 8002124:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	225a      	movs	r2, #90	; 0x5a
 800212a:	5a9b      	ldrh	r3, [r3, r2]
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1c1      	bne.n	80020b6 <HAL_UART_Receive+0x13a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2270      	movs	r2, #112	; 0x70
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_UART_Receive+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b008      	add	sp, #32
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000001ff 	.word	0x000001ff

08002154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002160:	2317      	movs	r3, #23
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4ac5      	ldr	r2, [pc, #788]	; (800249c <UART_SetConfig+0x348>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4ac0      	ldr	r2, [pc, #768]	; (80024a0 <UART_SetConfig+0x34c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4ab7      	ldr	r2, [pc, #732]	; (80024a4 <UART_SetConfig+0x350>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4ab3      	ldr	r2, [pc, #716]	; (80024a8 <UART_SetConfig+0x354>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d125      	bne.n	800222a <UART_SetConfig+0xd6>
 80021de:	4bb3      	ldr	r3, [pc, #716]	; (80024ac <UART_SetConfig+0x358>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00f      	beq.n	800220a <UART_SetConfig+0xb6>
 80021ea:	d304      	bcc.n	80021f6 <UART_SetConfig+0xa2>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d011      	beq.n	8002214 <UART_SetConfig+0xc0>
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d005      	beq.n	8002200 <UART_SetConfig+0xac>
 80021f4:	e013      	b.n	800221e <UART_SetConfig+0xca>
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e064      	b.n	80022ca <UART_SetConfig+0x176>
 8002200:	231f      	movs	r3, #31
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e05f      	b.n	80022ca <UART_SetConfig+0x176>
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2204      	movs	r2, #4
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e05a      	b.n	80022ca <UART_SetConfig+0x176>
 8002214:	231f      	movs	r3, #31
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2208      	movs	r2, #8
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e055      	b.n	80022ca <UART_SetConfig+0x176>
 800221e:	231f      	movs	r3, #31
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2210      	movs	r2, #16
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	e04f      	b.n	80022ca <UART_SetConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4aa0      	ldr	r2, [pc, #640]	; (80024b0 <UART_SetConfig+0x35c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d132      	bne.n	800229a <UART_SetConfig+0x146>
 8002234:	4b9d      	ldr	r3, [pc, #628]	; (80024ac <UART_SetConfig+0x358>)
 8002236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002238:	23c0      	movs	r3, #192	; 0xc0
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0252      	lsls	r2, r2, #9
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <UART_SetConfig+0x126>
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0252      	lsls	r2, r2, #9
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <UART_SetConfig+0x100>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <UART_SetConfig+0x112>
 8002252:	e01c      	b.n	800228e <UART_SetConfig+0x13a>
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0292      	lsls	r2, r2, #10
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <UART_SetConfig+0x130>
 800225c:	22c0      	movs	r2, #192	; 0xc0
 800225e:	0292      	lsls	r2, r2, #10
 8002260:	4293      	cmp	r3, r2
 8002262:	d005      	beq.n	8002270 <UART_SetConfig+0x11c>
 8002264:	e013      	b.n	800228e <UART_SetConfig+0x13a>
 8002266:	231f      	movs	r3, #31
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e02c      	b.n	80022ca <UART_SetConfig+0x176>
 8002270:	231f      	movs	r3, #31
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2202      	movs	r2, #2
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e027      	b.n	80022ca <UART_SetConfig+0x176>
 800227a:	231f      	movs	r3, #31
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2204      	movs	r2, #4
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e022      	b.n	80022ca <UART_SetConfig+0x176>
 8002284:	231f      	movs	r3, #31
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2208      	movs	r2, #8
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	e01d      	b.n	80022ca <UART_SetConfig+0x176>
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2210      	movs	r2, #16
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	e017      	b.n	80022ca <UART_SetConfig+0x176>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a85      	ldr	r2, [pc, #532]	; (80024b4 <UART_SetConfig+0x360>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d104      	bne.n	80022ae <UART_SetConfig+0x15a>
 80022a4:	231f      	movs	r3, #31
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e00d      	b.n	80022ca <UART_SetConfig+0x176>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a81      	ldr	r2, [pc, #516]	; (80024b8 <UART_SetConfig+0x364>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d104      	bne.n	80022c2 <UART_SetConfig+0x16e>
 80022b8:	231f      	movs	r3, #31
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e003      	b.n	80022ca <UART_SetConfig+0x176>
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2210      	movs	r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d000      	beq.n	80022d8 <UART_SetConfig+0x184>
 80022d6:	e07d      	b.n	80023d4 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 80022d8:	231f      	movs	r3, #31
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d01c      	beq.n	800231c <UART_SetConfig+0x1c8>
 80022e2:	dc02      	bgt.n	80022ea <UART_SetConfig+0x196>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <UART_SetConfig+0x1a0>
 80022e8:	e04b      	b.n	8002382 <UART_SetConfig+0x22e>
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d025      	beq.n	800233a <UART_SetConfig+0x1e6>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d037      	beq.n	8002362 <UART_SetConfig+0x20e>
 80022f2:	e046      	b.n	8002382 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f4:	f7ff f9ea 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80022f8:	0003      	movs	r3, r0
 80022fa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	005a      	lsls	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	18d2      	adds	r2, r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0019      	movs	r1, r3
 800230e:	0010      	movs	r0, r2
 8002310:	f7fd ff02 	bl	8000118 <__udivsi3>
 8002314:	0003      	movs	r3, r0
 8002316:	b29b      	uxth	r3, r3
 8002318:	61bb      	str	r3, [r7, #24]
        break;
 800231a:	e037      	b.n	800238c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	4a66      	ldr	r2, [pc, #408]	; (80024bc <UART_SetConfig+0x368>)
 8002324:	189a      	adds	r2, r3, r2
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0019      	movs	r1, r3
 800232c:	0010      	movs	r0, r2
 800232e:	f7fd fef3 	bl	8000118 <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	b29b      	uxth	r3, r3
 8002336:	61bb      	str	r3, [r7, #24]
        break;
 8002338:	e028      	b.n	800238c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800233a:	f7ff f93f 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 800233e:	0003      	movs	r3, r0
 8002340:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	005a      	lsls	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	18d2      	adds	r2, r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0019      	movs	r1, r3
 8002354:	0010      	movs	r0, r2
 8002356:	f7fd fedf 	bl	8000118 <__udivsi3>
 800235a:	0003      	movs	r3, r0
 800235c:	b29b      	uxth	r3, r3
 800235e:	61bb      	str	r3, [r7, #24]
        break;
 8002360:	e014      	b.n	800238c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	0252      	lsls	r2, r2, #9
 800236c:	189a      	adds	r2, r3, r2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f7fd fecf 	bl	8000118 <__udivsi3>
 800237a:	0003      	movs	r3, r0
 800237c:	b29b      	uxth	r3, r3
 800237e:	61bb      	str	r3, [r7, #24]
        break;
 8002380:	e004      	b.n	800238c <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8002382:	2317      	movs	r3, #23
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
        break;
 800238a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d91b      	bls.n	80023ca <UART_SetConfig+0x276>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <UART_SetConfig+0x36c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d817      	bhi.n	80023ca <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	b29a      	uxth	r2, r3
 800239e:	200a      	movs	r0, #10
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	210f      	movs	r1, #15
 80023a4:	438a      	bics	r2, r1
 80023a6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2207      	movs	r2, #7
 80023b0:	4013      	ands	r3, r2
 80023b2:	b299      	uxth	r1, r3
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	183a      	adds	r2, r7, r0
 80023b8:	8812      	ldrh	r2, [r2, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	183a      	adds	r2, r7, r0
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	e082      	b.n	80024d0 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 80023ca:	2317      	movs	r3, #23
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e07d      	b.n	80024d0 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 80023d4:	231f      	movs	r3, #31
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d01b      	beq.n	8002416 <UART_SetConfig+0x2c2>
 80023de:	dc02      	bgt.n	80023e6 <UART_SetConfig+0x292>
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <UART_SetConfig+0x29c>
 80023e4:	e049      	b.n	800247a <UART_SetConfig+0x326>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d024      	beq.n	8002434 <UART_SetConfig+0x2e0>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d035      	beq.n	800245a <UART_SetConfig+0x306>
 80023ee:	e044      	b.n	800247a <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f0:	f7ff f96c 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	085a      	lsrs	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	18d2      	adds	r2, r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f7fd fe85 	bl	8000118 <__udivsi3>
 800240e:	0003      	movs	r3, r0
 8002410:	b29b      	uxth	r3, r3
 8002412:	61bb      	str	r3, [r7, #24]
        break;
 8002414:	e036      	b.n	8002484 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <UART_SetConfig+0x370>)
 800241e:	189a      	adds	r2, r3, r2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0019      	movs	r1, r3
 8002426:	0010      	movs	r0, r2
 8002428:	f7fd fe76 	bl	8000118 <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	b29b      	uxth	r3, r3
 8002430:	61bb      	str	r3, [r7, #24]
        break;
 8002432:	e027      	b.n	8002484 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002434:	f7ff f8c2 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 8002438:	0003      	movs	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	085a      	lsrs	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	18d2      	adds	r2, r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f7fd fe63 	bl	8000118 <__udivsi3>
 8002452:	0003      	movs	r3, r0
 8002454:	b29b      	uxth	r3, r3
 8002456:	61bb      	str	r3, [r7, #24]
        break;
 8002458:	e014      	b.n	8002484 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	0212      	lsls	r2, r2, #8
 8002464:	189a      	adds	r2, r3, r2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0019      	movs	r1, r3
 800246c:	0010      	movs	r0, r2
 800246e:	f7fd fe53 	bl	8000118 <__udivsi3>
 8002472:	0003      	movs	r3, r0
 8002474:	b29b      	uxth	r3, r3
 8002476:	61bb      	str	r3, [r7, #24]
        break;
 8002478:	e004      	b.n	8002484 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 800247a:	2317      	movs	r3, #23
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
        break;
 8002482:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d91e      	bls.n	80024c8 <UART_SetConfig+0x374>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <UART_SetConfig+0x36c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d81a      	bhi.n	80024c8 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	e019      	b.n	80024d0 <UART_SetConfig+0x37c>
 800249c:	efff69f3 	.word	0xefff69f3
 80024a0:	ffffcfff 	.word	0xffffcfff
 80024a4:	fffff4ff 	.word	0xfffff4ff
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40004800 	.word	0x40004800
 80024b8:	40004c00 	.word	0x40004c00
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	0000ffff 	.word	0x0000ffff
 80024c4:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 80024c8:	2317      	movs	r3, #23
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80024dc:	2317      	movs	r3, #23
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b008      	add	sp, #32
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)

080024ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00b      	beq.n	8002516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <UART_AdvFeatureConfig+0x144>)
 8002506:	4013      	ands	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d00b      	beq.n	8002538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a43      	ldr	r2, [pc, #268]	; (8002634 <UART_AdvFeatureConfig+0x148>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d00b      	beq.n	800255a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a3b      	ldr	r2, [pc, #236]	; (8002638 <UART_AdvFeatureConfig+0x14c>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2208      	movs	r2, #8
 8002560:	4013      	ands	r3, r2
 8002562:	d00b      	beq.n	800257c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a34      	ldr	r2, [pc, #208]	; (800263c <UART_AdvFeatureConfig+0x150>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2210      	movs	r2, #16
 8002582:	4013      	ands	r3, r2
 8002584:	d00b      	beq.n	800259e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <UART_AdvFeatureConfig+0x154>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2220      	movs	r2, #32
 80025a4:	4013      	ands	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4a25      	ldr	r2, [pc, #148]	; (8002644 <UART_AdvFeatureConfig+0x158>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	d01d      	beq.n	8002606 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <UART_AdvFeatureConfig+0x15c>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	035b      	lsls	r3, r3, #13
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10b      	bne.n	8002606 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a15      	ldr	r2, [pc, #84]	; (800264c <UART_AdvFeatureConfig+0x160>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	4013      	ands	r3, r2
 800260e:	d00b      	beq.n	8002628 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <UART_AdvFeatureConfig+0x164>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  }
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffdffff 	.word	0xfffdffff
 8002634:	fffeffff 	.word	0xfffeffff
 8002638:	fffbffff 	.word	0xfffbffff
 800263c:	ffff7fff 	.word	0xffff7fff
 8002640:	ffffefff 	.word	0xffffefff
 8002644:	ffffdfff 	.word	0xffffdfff
 8002648:	ffefffff 	.word	0xffefffff
 800264c:	ff9fffff 	.word	0xff9fffff
 8002650:	fff7ffff 	.word	0xfff7ffff

08002654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af02      	add	r7, sp, #8
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002662:	f7fe f8fd 	bl	8000860 <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d10d      	bne.n	8002694 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	0399      	lsls	r1, r3, #14
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <UART_CheckIdleState+0x88>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	0013      	movs	r3, r2
 8002686:	2200      	movs	r2, #0
 8002688:	f000 f82a 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d001      	beq.n	8002694 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e01f      	b.n	80026d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d10d      	bne.n	80026be <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	03d9      	lsls	r1, r3, #15
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <UART_CheckIdleState+0x88>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	0013      	movs	r3, r2
 80026b0:	2200      	movs	r2, #0
 80026b2:	f000 f815 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d001      	beq.n	80026be <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e00a      	b.n	80026d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2270      	movs	r2, #112	; 0x70
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	01ffffff 	.word	0x01ffffff

080026e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f0:	e05d      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d05a      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fe f8b2 	bl	8000860 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11b      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	492f      	ldr	r1, [pc, #188]	; (80027d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800271a:	400a      	ands	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	438a      	bics	r2, r1
 800272c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2270      	movs	r2, #112	; 0x70
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e043      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	4013      	ands	r3, r2
 8002750:	d02d      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	401a      	ands	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	429a      	cmp	r2, r3
 8002764:	d123      	bne.n	80027ae <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4917      	ldr	r1, [pc, #92]	; (80027d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	438a      	bics	r2, r1
 800278e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2270      	movs	r2, #112	; 0x70
 80027a6:	2100      	movs	r1, #0
 80027a8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e00f      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	425a      	negs	r2, r3
 80027be:	4153      	adcs	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	001a      	movs	r2, r3
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d092      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	fffffe5f 	.word	0xfffffe5f

080027dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e2:	f3ef 8305 	mrs	r3, IPSR
 80027e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80027e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	607b      	str	r3, [r7, #4]
  return(result);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <osKernelInitialize+0x2e>
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <osKernelInitialize+0x54>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d103      	bne.n	800280a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002802:	2306      	movs	r3, #6
 8002804:	425b      	negs	r3, r3
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e00c      	b.n	8002824 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <osKernelInitialize+0x54>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <osKernelInitialize+0x54>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e002      	b.n	8002824 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800281e:	2301      	movs	r3, #1
 8002820:	425b      	negs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	20000200 	.word	0x20000200

08002834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800283a:	f3ef 8305 	mrs	r3, IPSR
 800283e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002840:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002846:	f3ef 8310 	mrs	r3, PRIMASK
 800284a:	607b      	str	r3, [r7, #4]
  return(result);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <osKernelStart+0x2e>
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <osKernelStart+0x58>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d103      	bne.n	8002862 <osKernelStart+0x2e>
    stat = osErrorISR;
 800285a:	2306      	movs	r3, #6
 800285c:	425b      	negs	r3, r3
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e00e      	b.n	8002880 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <osKernelStart+0x58>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <osKernelStart+0x58>)
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002870:	f000 ff7e 	bl	8003770 <vTaskStartScheduler>
      stat = osOK;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e002      	b.n	8002880 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800287a:	2301      	movs	r3, #1
 800287c:	425b      	negs	r3, r3
 800287e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	20000200 	.word	0x20000200

08002890 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b090      	sub	sp, #64	; 0x40
 8002894:	af04      	add	r7, sp, #16
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028a0:	f3ef 8305 	mrs	r3, IPSR
 80028a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80028a6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d000      	beq.n	80028ae <osThreadNew+0x1e>
 80028ac:	e090      	b.n	80029d0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <osThreadNew+0x34>
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <osThreadNew+0x14c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d100      	bne.n	80028c4 <osThreadNew+0x34>
 80028c2:	e085      	b.n	80029d0 <osThreadNew+0x140>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d100      	bne.n	80028cc <osThreadNew+0x3c>
 80028ca:	e081      	b.n	80029d0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80028d0:	2318      	movs	r3, #24
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80028d4:	2117      	movs	r1, #23
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	425b      	negs	r3, r3
 80028e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d044      	beq.n	8002976 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <osThreadNew+0x6a>
        name = attr->name;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <osThreadNew+0x8e>
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	2b38      	cmp	r3, #56	; 0x38
 8002912:	d804      	bhi.n	800291e <osThreadNew+0x8e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d001      	beq.n	8002922 <osThreadNew+0x92>
        return (NULL);
 800291e:	2300      	movs	r3, #0
 8002920:	e057      	b.n	80029d2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00e      	beq.n	8002958 <osThreadNew+0xc8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b5b      	cmp	r3, #91	; 0x5b
 8002940:	d90a      	bls.n	8002958 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <osThreadNew+0xc8>
        mem = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	e010      	b.n	800297a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <osThreadNew+0xea>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d108      	bne.n	800297a <osThreadNew+0xea>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <osThreadNew+0xea>
          mem = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	e001      	b.n	800297a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d112      	bne.n	80029a6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002988:	68bd      	ldr	r5, [r7, #8]
 800298a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800298c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	9201      	str	r2, [sp, #4]
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	002b      	movs	r3, r5
 800299a:	0022      	movs	r2, r4
 800299c:	f000 fd49 	bl	8003432 <xTaskCreateStatic>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e014      	b.n	80029d0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68bc      	ldr	r4, [r7, #8]
 80029b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	2310      	movs	r3, #16
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	0023      	movs	r3, r4
 80029c2:	f000 fd79 	bl	80034b8 <xTaskCreate>
 80029c6:	0003      	movs	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <osThreadNew+0x140>
          hTask = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029d0:	693b      	ldr	r3, [r7, #16]
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b00c      	add	sp, #48	; 0x30
 80029d8:	bdb0      	pop	{r4, r5, r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	20000200 	.word	0x20000200

080029e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e8:	f3ef 8305 	mrs	r3, IPSR
 80029ec:	613b      	str	r3, [r7, #16]
  return(result);
 80029ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f4:	f3ef 8310 	mrs	r3, PRIMASK
 80029f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <osDelay+0x30>
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <osDelay+0x4c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d103      	bne.n	8002a10 <osDelay+0x30>
    stat = osErrorISR;
 8002a08:	2306      	movs	r3, #6
 8002a0a:	425b      	negs	r3, r3
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e008      	b.n	8002a22 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <osDelay+0x42>
      vTaskDelay(ticks);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fe81 	bl	8003724 <vTaskDelay>
    }
  }

  return (stat);
 8002a22:	697b      	ldr	r3, [r7, #20]
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b006      	add	sp, #24
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000200 	.word	0x20000200

08002a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <vApplicationGetIdleTaskMemory+0x28>)
 8002a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	20000204 	.word	0x20000204
 8002a5c:	20000260 	.word	0x20000260

08002a60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <vApplicationGetTimerTaskMemory+0x28>)
 8002a70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <vApplicationGetTimerTaskMemory+0x2c>)
 8002a76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000460 	.word	0x20000460
 8002a8c:	200004bc 	.word	0x200004bc

08002a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4252      	negs	r2, r2
 8002aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3308      	adds	r3, #8
 8002aae:	001a      	movs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	001a      	movs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	d103      	bne.n	8002b44 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e00c      	b.n	8002b5e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3308      	adds	r3, #8
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e002      	b.n	8002b52 <vListInsert+0x2c>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d2f6      	bcs.n	8002b4c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6852      	ldr	r2, [r2, #4]
 8002bb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d103      	bne.n	8002bc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <xQueueGenericReset+0x18>
 8002bf6:	b672      	cpsid	i
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002bfa:	f001 fdd1 	bl	80047a0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	434b      	muls	r3, r1
 8002c0c:	18d2      	adds	r2, r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	1e59      	subs	r1, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	434b      	muls	r3, r1
 8002c30:	18d2      	adds	r2, r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2244      	movs	r2, #68	; 0x44
 8002c3a:	21ff      	movs	r1, #255	; 0xff
 8002c3c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2245      	movs	r2, #69	; 0x45
 8002c42:	21ff      	movs	r1, #255	; 0xff
 8002c44:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3310      	adds	r3, #16
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 ffcd 	bl	8003bf8 <xTaskRemoveFromEventList>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d00c      	beq.n	8002c7c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c62:	f001 fd8d 	bl	8004780 <vPortYield>
 8002c66:	e009      	b.n	8002c7c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff ff0f 	bl	8002a90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3324      	adds	r3, #36	; 0x24
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff ff0a 	bl	8002a90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c7c:	f001 fda2 	bl	80047c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c8a:	b590      	push	{r4, r7, lr}
 8002c8c:	b089      	sub	sp, #36	; 0x24
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <xQueueGenericCreateStatic+0x18>
 8002c9e:	b672      	cpsid	i
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <xQueueGenericCreateStatic+0x22>
 8002ca8:	b672      	cpsid	i
 8002caa:	e7fe      	b.n	8002caa <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <xQueueGenericCreateStatic+0x2e>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <xQueueGenericCreateStatic+0x32>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <xQueueGenericCreateStatic+0x34>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericCreateStatic+0x3c>
 8002cc2:	b672      	cpsid	i
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x48>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x4c>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericCreateStatic+0x4e>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericCreateStatic+0x56>
 8002cdc:	b672      	cpsid	i
 8002cde:	e7fe      	b.n	8002cde <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ce0:	2350      	movs	r3, #80	; 0x50
 8002ce2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b50      	cmp	r3, #80	; 0x50
 8002ce8:	d001      	beq.n	8002cee <xQueueGenericCreateStatic+0x64>
 8002cea:	b672      	cpsid	i
 8002cec:	e7fe      	b.n	8002cec <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2246      	movs	r2, #70	; 0x46
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d00:	2328      	movs	r3, #40	; 0x28
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781c      	ldrb	r4, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	0023      	movs	r3, r4
 8002d12:	f000 f805 	bl	8002d20 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d16:	697b      	ldr	r3, [r7, #20]
	}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b007      	add	sp, #28
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	1cfb      	adds	r3, r7, #3
 8002d30:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e002      	b.n	8002d46 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2101      	movs	r1, #1
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff ff43 	bl	8002be2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1cfa      	adds	r2, r7, #3
 8002d60:	214c      	movs	r1, #76	; 0x4c
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08a      	sub	sp, #40	; 0x28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericSend+0x20>
 8002d8a:	b672      	cpsid	i
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <xQueueGenericSend+0x2e>
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <xQueueGenericSend+0x32>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <xQueueGenericSend+0x34>
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <xQueueGenericSend+0x3c>
 8002da6:	b672      	cpsid	i
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d103      	bne.n	8002db8 <xQueueGenericSend+0x4a>
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <xQueueGenericSend+0x4e>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <xQueueGenericSend+0x50>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <xQueueGenericSend+0x58>
 8002dc2:	b672      	cpsid	i
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc6:	f001 f8af 	bl	8003f28 <xTaskGetSchedulerState>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d102      	bne.n	8002dd4 <xQueueGenericSend+0x66>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <xQueueGenericSend+0x6a>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <xQueueGenericSend+0x6c>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericSend+0x74>
 8002dde:	b672      	cpsid	i
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002de2:	f001 fcdd 	bl	80047a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <xQueueGenericSend+0x8a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d11e      	bne.n	8002e36 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f99f 	bl	8003142 <prvCopyDataToQueue>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 feef 	bl	8003bf8 <xTaskRemoveFromEventList>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d007      	beq.n	8002e2e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e1e:	f001 fcaf 	bl	8004780 <vPortYield>
 8002e22:	e004      	b.n	8002e2e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e2a:	f001 fca9 	bl	8004780 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e2e:	f001 fcc9 	bl	80047c4 <vPortExitCritical>
				return pdPASS;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e05b      	b.n	8002eee <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e3c:	f001 fcc2 	bl	80047c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e054      	b.n	8002eee <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4a:	2314      	movs	r3, #20
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 ff2e 	bl	8003cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e58:	f001 fcb4 	bl	80047c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e5c:	f000 fcdc 	bl	8003818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e60:	f001 fc9e 	bl	80047a0 <vPortEnterCritical>
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	2244      	movs	r2, #68	; 0x44
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	d103      	bne.n	8002e78 <xQueueGenericSend+0x10a>
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	2244      	movs	r2, #68	; 0x44
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2245      	movs	r2, #69	; 0x45
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	d103      	bne.n	8002e8c <xQueueGenericSend+0x11e>
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2245      	movs	r2, #69	; 0x45
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]
 8002e8c:	f001 fc9a 	bl	80047c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e90:	1d3a      	adds	r2, r7, #4
 8002e92:	2314      	movs	r3, #20
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	0011      	movs	r1, r2
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 ff1d 	bl	8003cd8 <xTaskCheckForTimeOut>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d11e      	bne.n	8002ee0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 fa51 	bl	800334c <prvIsQueueFull>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d011      	beq.n	8002ed2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fe5a 	bl	8003b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f9d0 	bl	8003264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ec4:	f000 fcb4 	bl	8003830 <xTaskResumeAll>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d18a      	bne.n	8002de2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002ecc:	f001 fc58 	bl	8004780 <vPortYield>
 8002ed0:	e787      	b.n	8002de2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f9c5 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eda:	f000 fca9 	bl	8003830 <xTaskResumeAll>
 8002ede:	e780      	b.n	8002de2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f9be 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee8:	f000 fca2 	bl	8003830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eec:	2300      	movs	r3, #0
		}
	}
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b00a      	add	sp, #40	; 0x28
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b089      	sub	sp, #36	; 0x24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSendFromISR+0x1c>
 8002f0e:	b672      	cpsid	i
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <xQueueGenericSendFromISR+0x2a>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueGenericSendFromISR+0x2e>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueGenericSendFromISR+0x30>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericSendFromISR+0x38>
 8002f2a:	b672      	cpsid	i
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d103      	bne.n	8002f3c <xQueueGenericSendFromISR+0x46>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <xQueueGenericSendFromISR+0x4a>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <xQueueGenericSendFromISR+0x4c>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSendFromISR+0x54>
 8002f46:	b672      	cpsid	i
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f4a:	f001 fc53 	bl	80047f4 <ulSetInterruptMaskFromISR>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <xQueueGenericSendFromISR+0x6e>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d12e      	bne.n	8002fc2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f64:	2413      	movs	r4, #19
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	2145      	movs	r1, #69	; 0x45
 8002f6c:	5c52      	ldrb	r2, [r2, r1]
 8002f6e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f8e3 	bl	8003142 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	d111      	bne.n	8002faa <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3324      	adds	r3, #36	; 0x24
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 fe30 	bl	8003bf8 <xTaskRemoveFromEventList>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d00f      	beq.n	8002fbc <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e008      	b.n	8002fbc <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002faa:	2313      	movs	r3, #19
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	b259      	sxtb	r1, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2245      	movs	r2, #69	; 0x45
 8002fba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
		{
 8002fc0:	e001      	b.n	8002fc6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f001 fc19 	bl	8004800 <vClearInterruptMaskFromISR>

	return xReturn;
 8002fce:	69fb      	ldr	r3, [r7, #28]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b009      	add	sp, #36	; 0x24
 8002fd6:	bd90      	pop	{r4, r7, pc}

08002fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <xQueueReceive+0x1e>
 8002ff2:	b672      	cpsid	i
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueReceive+0x2c>
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueReceive+0x30>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueReceive+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueReceive+0x3a>
 800300e:	b672      	cpsid	i
 8003010:	e7fe      	b.n	8003010 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003012:	f000 ff89 	bl	8003f28 <xTaskGetSchedulerState>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d102      	bne.n	8003020 <xQueueReceive+0x48>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <xQueueReceive+0x4c>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <xQueueReceive+0x4e>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueReceive+0x56>
 800302a:	b672      	cpsid	i
 800302c:	e7fe      	b.n	800302c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800302e:	f001 fbb7 	bl	80047a0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01a      	beq.n	8003074 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f8e7 	bl	8003218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	3310      	adds	r3, #16
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fdca 	bl	8003bf8 <xTaskRemoveFromEventList>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003068:	f001 fb8a 	bl	8004780 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800306c:	f001 fbaa 	bl	80047c4 <vPortExitCritical>
				return pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	e062      	b.n	800313a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307a:	f001 fba3 	bl	80047c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800307e:	2300      	movs	r3, #0
 8003080:	e05b      	b.n	800313a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003088:	2314      	movs	r3, #20
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fe0f 	bl	8003cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003092:	2301      	movs	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003096:	f001 fb95 	bl	80047c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800309a:	f000 fbbd 	bl	8003818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800309e:	f001 fb7f 	bl	80047a0 <vPortEnterCritical>
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2244      	movs	r2, #68	; 0x44
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	d103      	bne.n	80030b6 <xQueueReceive+0xde>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2244      	movs	r2, #68	; 0x44
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2245      	movs	r2, #69	; 0x45
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	d103      	bne.n	80030ca <xQueueReceive+0xf2>
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2245      	movs	r2, #69	; 0x45
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	f001 fb7b 	bl	80047c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ce:	1d3a      	adds	r2, r7, #4
 80030d0:	2314      	movs	r3, #20
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fdfe 	bl	8003cd8 <xTaskCheckForTimeOut>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d11e      	bne.n	800311e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f91c 	bl	8003320 <prvIsQueueEmpty>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d011      	beq.n	8003110 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 fd3b 	bl	8003b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f8b1 	bl	8003264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003102:	f000 fb95 	bl	8003830 <xTaskResumeAll>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d191      	bne.n	800302e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800310a:	f001 fb39 	bl	8004780 <vPortYield>
 800310e:	e78e      	b.n	800302e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f8a6 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003118:	f000 fb8a 	bl	8003830 <xTaskResumeAll>
 800311c:	e787      	b.n	800302e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f89f 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003126:	f000 fb83 	bl	8003830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	0018      	movs	r0, r3
 800312e:	f000 f8f7 	bl	8003320 <prvIsQueueEmpty>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d100      	bne.n	8003138 <xQueueReceive+0x160>
 8003136:	e77a      	b.n	800302e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b00a      	add	sp, #40	; 0x28
 8003140:	bd80      	pop	{r7, pc}

08003142 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10e      	bne.n	800317e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d14e      	bne.n	8003206 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fef7 	bl	8003f60 <xTaskPriorityDisinherit>
 8003172:	0003      	movs	r3, r0
 8003174:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e043      	b.n	8003206 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d119      	bne.n	80031b8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6898      	ldr	r0, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	0019      	movs	r1, r3
 8003190:	f001 fd74 	bl	8004c7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	18d2      	adds	r2, r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d32b      	bcc.n	8003206 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e026      	b.n	8003206 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68d8      	ldr	r0, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0019      	movs	r1, r3
 80031c4:	f001 fd5a 	bl	8004c7c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	425b      	negs	r3, r3
 80031d2:	18d2      	adds	r2, r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d207      	bcs.n	80031f4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	425b      	negs	r3, r3
 80031ee:	18d2      	adds	r2, r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d105      	bne.n	8003206 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	3b01      	subs	r3, #1
 8003204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800320e:	697b      	ldr	r3, [r7, #20]
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b006      	add	sp, #24
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	18d2      	adds	r2, r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d303      	bcc.n	800324c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	0018      	movs	r0, r3
 8003258:	f001 fd10 	bl	8004c7c <memcpy>
	}
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800326c:	f001 fa98 	bl	80047a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	2145      	movs	r1, #69	; 0x45
 8003278:	5c52      	ldrb	r2, [r2, r1]
 800327a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800327c:	e013      	b.n	80032a6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3324      	adds	r3, #36	; 0x24
 800328a:	0018      	movs	r0, r3
 800328c:	f000 fcb4 	bl	8003bf8 <xTaskRemoveFromEventList>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003294:	f000 fd70 	bl	8003d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003298:	210f      	movs	r1, #15
 800329a:	187b      	adds	r3, r7, r1
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3b01      	subs	r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032a6:	230f      	movs	r3, #15
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	dce5      	bgt.n	800327e <prvUnlockQueue+0x1a>
 80032b2:	e000      	b.n	80032b6 <prvUnlockQueue+0x52>
					break;
 80032b4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2245      	movs	r2, #69	; 0x45
 80032ba:	21ff      	movs	r1, #255	; 0xff
 80032bc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80032be:	f001 fa81 	bl	80047c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032c2:	f001 fa6d 	bl	80047a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032c6:	230e      	movs	r3, #14
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	2144      	movs	r1, #68	; 0x44
 80032ce:	5c52      	ldrb	r2, [r2, r1]
 80032d0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d2:	e013      	b.n	80032fc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3310      	adds	r3, #16
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fc89 	bl	8003bf8 <xTaskRemoveFromEventList>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d001      	beq.n	80032ee <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80032ea:	f000 fd45 	bl	8003d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032ee:	210e      	movs	r1, #14
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fc:	230e      	movs	r3, #14
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	dce5      	bgt.n	80032d4 <prvUnlockQueue+0x70>
 8003308:	e000      	b.n	800330c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800330a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2244      	movs	r2, #68	; 0x44
 8003310:	21ff      	movs	r1, #255	; 0xff
 8003312:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003314:	f001 fa56 	bl	80047c4 <vPortExitCritical>
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003328:	f001 fa3a 	bl	80047a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e001      	b.n	800333e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800333e:	f001 fa41 	bl	80047c4 <vPortExitCritical>

	return xReturn;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003354:	f001 fa24 	bl	80047a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	429a      	cmp	r2, r3
 8003362:	d102      	bne.n	800336a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e001      	b.n	800336e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800336e:	f001 fa29 	bl	80047c4 <vPortExitCritical>

	return xReturn;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b004      	add	sp, #16
 800337a:	bd80      	pop	{r7, pc}

0800337c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e015      	b.n	80033b8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <vQueueAddToRegistry+0x4c>)
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	58d3      	ldr	r3, [r2, r3]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <vQueueAddToRegistry+0x4c>)
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	00d2      	lsls	r2, r2, #3
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <vQueueAddToRegistry+0x4c>)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3304      	adds	r3, #4
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033b0:	e005      	b.n	80033be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d9e6      	bls.n	800338c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20001c40 	.word	0x20001c40

080033cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033dc:	f001 f9e0 	bl	80047a0 <vPortEnterCritical>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2244      	movs	r2, #68	; 0x44
 80033e4:	5c9b      	ldrb	r3, [r3, r2]
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	d103      	bne.n	80033f4 <vQueueWaitForMessageRestricted+0x28>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2244      	movs	r2, #68	; 0x44
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2245      	movs	r2, #69	; 0x45
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	d103      	bne.n	8003408 <vQueueWaitForMessageRestricted+0x3c>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2245      	movs	r2, #69	; 0x45
 8003404:	2100      	movs	r1, #0
 8003406:	5499      	strb	r1, [r3, r2]
 8003408:	f001 f9dc 	bl	80047c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fbc5 	bl	8003bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ff1d 	bl	8003264 <prvUnlockQueue>
	}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b006      	add	sp, #24
 8003430:	bd80      	pop	{r7, pc}

08003432 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003432:	b590      	push	{r4, r7, lr}
 8003434:	b08d      	sub	sp, #52	; 0x34
 8003436:	af04      	add	r7, sp, #16
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <xTaskCreateStatic+0x18>
 8003446:	b672      	cpsid	i
 8003448:	e7fe      	b.n	8003448 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <xTaskCreateStatic+0x22>
 8003450:	b672      	cpsid	i
 8003452:	e7fe      	b.n	8003452 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003454:	235c      	movs	r3, #92	; 0x5c
 8003456:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b5c      	cmp	r3, #92	; 0x5c
 800345c:	d001      	beq.n	8003462 <xTaskCreateStatic+0x30>
 800345e:	b672      	cpsid	i
 8003460:	e7fe      	b.n	8003460 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <xTaskCreateStatic+0x78>
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01d      	beq.n	80034aa <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2259      	movs	r2, #89	; 0x59
 800347c:	2102      	movs	r1, #2
 800347e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003480:	683c      	ldr	r4, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	2300      	movs	r3, #0
 800348a:	9303      	str	r3, [sp, #12]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	2318      	movs	r3, #24
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	0023      	movs	r3, r4
 800349c:	f000 f858 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 f8d6 	bl	8003654 <prvAddNewTaskToReadyList>
 80034a8:	e001      	b.n	80034ae <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034ae:	69bb      	ldr	r3, [r7, #24]
	}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b009      	add	sp, #36	; 0x24
 80034b6:	bd90      	pop	{r4, r7, pc}

080034b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08d      	sub	sp, #52	; 0x34
 80034bc:	af04      	add	r7, sp, #16
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f001 f9fe 	bl	80048d0 <pvPortMalloc>
 80034d4:	0003      	movs	r3, r0
 80034d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034de:	205c      	movs	r0, #92	; 0x5c
 80034e0:	f001 f9f6 	bl	80048d0 <pvPortMalloc>
 80034e4:	0003      	movs	r3, r0
 80034e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
 80034f4:	e006      	b.n	8003504 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f001 fa8f 	bl	8004a1c <vPortFree>
 80034fe:	e001      	b.n	8003504 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01a      	beq.n	8003540 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2259      	movs	r2, #89	; 0x59
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003512:	1dbb      	adds	r3, r7, #6
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	683c      	ldr	r4, [r7, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	2300      	movs	r3, #0
 800351e:	9303      	str	r3, [sp, #12]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	0023      	movs	r3, r4
 800352e:	f000 f80f 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 f88d 	bl	8003654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e002      	b.n	8003546 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003540:	2301      	movs	r3, #1
 8003542:	425b      	negs	r3, r3
 8003544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003546:	69bb      	ldr	r3, [r7, #24]
	}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b009      	add	sp, #36	; 0x24
 800354e:	bd90      	pop	{r4, r7, pc}

08003550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	001a      	movs	r2, r3
 8003568:	21a5      	movs	r1, #165	; 0xa5
 800356a:	f001 fb90 	bl	8004c8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4936      	ldr	r1, [pc, #216]	; (8003650 <prvInitialiseNewTask+0x100>)
 8003576:	468c      	mov	ip, r1
 8003578:	4463      	add	r3, ip
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2207      	movs	r2, #7
 8003584:	4393      	bics	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	d001      	beq.n	8003594 <prvInitialiseNewTask+0x44>
 8003590:	b672      	cpsid	i
 8003592:	e7fe      	b.n	8003592 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e013      	b.n	80035c2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	7818      	ldrb	r0, [r3, #0]
 80035a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a4:	2134      	movs	r1, #52	; 0x34
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	185b      	adds	r3, r3, r1
 80035ac:	1c02      	adds	r2, r0, #0
 80035ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	18d3      	adds	r3, r2, r3
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d9e8      	bls.n	800359a <prvInitialiseNewTask+0x4a>
 80035c8:	e000      	b.n	80035cc <prvInitialiseNewTask+0x7c>
		{
			break;
 80035ca:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	2243      	movs	r2, #67	; 0x43
 80035d0:	2100      	movs	r1, #0
 80035d2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b37      	cmp	r3, #55	; 0x37
 80035d8:	d901      	bls.n	80035de <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035da:	2337      	movs	r3, #55	; 0x37
 80035dc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2200      	movs	r2, #0
 80035ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	3304      	adds	r3, #4
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fa69 	bl	8002acc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	3318      	adds	r3, #24
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff fa64 	bl	8002acc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	2238      	movs	r2, #56	; 0x38
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2200      	movs	r2, #0
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	2258      	movs	r2, #88	; 0x58
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	0018      	movs	r0, r3
 8003630:	f001 f81c 	bl	800466c <pxPortInitialiseStack>
 8003634:	0002      	movs	r2, r0
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b006      	add	sp, #24
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	3fffffff 	.word	0x3fffffff

08003654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800365c:	f001 f8a0 	bl	80047a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 8003668:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003680:	f000 fb94 	bl	8003dac <prvInitialiseTaskLists>
 8003684:	e00d      	b.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <prvAddNewTaskToReadyList+0xc0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	429a      	cmp	r2, r3
 800369a:	d802      	bhi.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 80036aa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d903      	bls.n	80036c8 <prvAddNewTaskToReadyList+0x74>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	0013      	movs	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4a12      	ldr	r2, [pc, #72]	; (8003720 <prvAddNewTaskToReadyList+0xcc>)
 80036d6:	189a      	adds	r2, r3, r2
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	0019      	movs	r1, r3
 80036de:	0010      	movs	r0, r2
 80036e0:	f7ff f9ff 	bl	8002ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036e4:	f001 f86e 	bl	80047c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <prvAddNewTaskToReadyList+0xc0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d201      	bcs.n	8003702 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036fe:	f001 f83f 	bl	8004780 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	20000d90 	.word	0x20000d90
 8003710:	200008bc 	.word	0x200008bc
 8003714:	20000d9c 	.word	0x20000d9c
 8003718:	20000dac 	.word	0x20000dac
 800371c:	20000d98 	.word	0x20000d98
 8003720:	200008c0 	.word	0x200008c0

08003724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <vTaskDelay+0x48>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <vTaskDelay+0x1e>
 800373e:	b672      	cpsid	i
 8003740:	e7fe      	b.n	8003740 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003742:	f000 f869 	bl	8003818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2100      	movs	r1, #0
 800374a:	0018      	movs	r0, r3
 800374c:	f000 fc64 	bl	8004018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003750:	f000 f86e 	bl	8003830 <xTaskResumeAll>
 8003754:	0003      	movs	r3, r0
 8003756:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800375e:	f001 f80f 	bl	8004780 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000db8 	.word	0x20000db8

08003770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800377e:	003a      	movs	r2, r7
 8003780:	1d39      	adds	r1, r7, #4
 8003782:	2308      	movs	r3, #8
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff f952 	bl	8002a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800378c:	683c      	ldr	r4, [r7, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <vTaskStartScheduler+0x90>)
 8003794:	481b      	ldr	r0, [pc, #108]	; (8003804 <vTaskStartScheduler+0x94>)
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	0022      	movs	r2, r4
 80037a2:	f7ff fe46 	bl	8003432 <xTaskCreateStatic>
 80037a6:	0002      	movs	r2, r0
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <vTaskStartScheduler+0x98>)
 80037aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <vTaskStartScheduler+0x98>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037b4:	2301      	movs	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e001      	b.n	80037be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d103      	bne.n	80037cc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80037c4:	f000 fc7c 	bl	80040c0 <xTimerCreateTimerTask>
 80037c8:	0003      	movs	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10d      	bne.n	80037ee <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80037d2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <vTaskStartScheduler+0x9c>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	4252      	negs	r2, r2
 80037da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <vTaskStartScheduler+0xa0>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <vTaskStartScheduler+0xa4>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037e8:	f000 ffa6 	bl	8004738 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037ec:	e004      	b.n	80037f8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	d101      	bne.n	80037f8 <vTaskStartScheduler+0x88>
 80037f4:	b672      	cpsid	i
 80037f6:	e7fe      	b.n	80037f6 <vTaskStartScheduler+0x86>
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b005      	add	sp, #20
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	08005664 	.word	0x08005664
 8003804:	08003d8d 	.word	0x08003d8d
 8003808:	20000db4 	.word	0x20000db4
 800380c:	20000db0 	.word	0x20000db0
 8003810:	20000d9c 	.word	0x20000d9c
 8003814:	20000d94 	.word	0x20000d94

08003818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <vTaskSuspendAll+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	4b02      	ldr	r3, [pc, #8]	; (800382c <vTaskSuspendAll+0x14>)
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000db8 	.word	0x20000db8

08003830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800383e:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <xTaskResumeAll+0xf8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <xTaskResumeAll+0x1a>
 8003846:	b672      	cpsid	i
 8003848:	e7fe      	b.n	8003848 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800384a:	f000 ffa9 	bl	80047a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <xTaskResumeAll+0xf8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <xTaskResumeAll+0xf8>)
 8003856:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003858:	4b33      	ldr	r3, [pc, #204]	; (8003928 <xTaskResumeAll+0xf8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d15b      	bne.n	8003918 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <xTaskResumeAll+0xfc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d057      	beq.n	8003918 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003868:	e02f      	b.n	80038ca <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <xTaskResumeAll+0x100>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3318      	adds	r3, #24
 8003876:	0018      	movs	r0, r3
 8003878:	f7ff f98b 	bl	8002b92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3304      	adds	r3, #4
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff f986 	bl	8002b92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <xTaskResumeAll+0x104>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d903      	bls.n	800389a <xTaskResumeAll+0x6a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <xTaskResumeAll+0x104>)
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	0013      	movs	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4a24      	ldr	r2, [pc, #144]	; (8003938 <xTaskResumeAll+0x108>)
 80038a8:	189a      	adds	r2, r3, r2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3304      	adds	r3, #4
 80038ae:	0019      	movs	r1, r3
 80038b0:	0010      	movs	r0, r2
 80038b2:	f7ff f916 	bl	8002ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <xTaskResumeAll+0x10c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d302      	bcc.n	80038ca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80038c4:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <xTaskResumeAll+0x110>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <xTaskResumeAll+0x100>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cb      	bne.n	800386a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038d8:	f000 fb02 	bl	8003ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <xTaskResumeAll+0x114>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038e8:	f000 f83c 	bl	8003964 <xTaskIncrementTick>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d002      	beq.n	80038f6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <xTaskResumeAll+0x110>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f2      	bne.n	80038e8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <xTaskResumeAll+0x114>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <xTaskResumeAll+0x110>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003914:	f000 ff34 	bl	8004780 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f000 ff54 	bl	80047c4 <vPortExitCritical>

	return xAlreadyYielded;
 800391c:	68bb      	ldr	r3, [r7, #8]
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000db8 	.word	0x20000db8
 800392c:	20000d90 	.word	0x20000d90
 8003930:	20000d50 	.word	0x20000d50
 8003934:	20000d98 	.word	0x20000d98
 8003938:	200008c0 	.word	0x200008c0
 800393c:	200008bc 	.word	0x200008bc
 8003940:	20000da4 	.word	0x20000da4
 8003944:	20000da0 	.word	0x20000da0

08003948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <xTaskGetTickCount+0x18>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	20000d94 	.word	0x20000d94

08003964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396e:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <xTaskIncrementTick+0x13c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d000      	beq.n	8003978 <xTaskIncrementTick+0x14>
 8003976:	e083      	b.n	8003a80 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003978:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <xTaskIncrementTick+0x140>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003980:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <xTaskIncrementTick+0x140>)
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d117      	bne.n	80039bc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <xTaskIncrementTick+0x144>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <xTaskIncrementTick+0x36>
 8003996:	b672      	cpsid	i
 8003998:	e7fe      	b.n	8003998 <xTaskIncrementTick+0x34>
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <xTaskIncrementTick+0x144>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	4b42      	ldr	r3, [pc, #264]	; (8003aac <xTaskIncrementTick+0x148>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <xTaskIncrementTick+0x144>)
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <xTaskIncrementTick+0x148>)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <xTaskIncrementTick+0x14c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <xTaskIncrementTick+0x14c>)
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f000 fa92 	bl	8003ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039bc:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <xTaskIncrementTick+0x150>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d34e      	bcc.n	8003a64 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <xTaskIncrementTick+0x144>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xTaskIncrementTick+0x70>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <xTaskIncrementTick+0x72>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <xTaskIncrementTick+0x150>)
 80039dc:	2201      	movs	r2, #1
 80039de:	4252      	negs	r2, r2
 80039e0:	601a      	str	r2, [r3, #0]
					break;
 80039e2:	e03f      	b.n	8003a64 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <xTaskIncrementTick+0x144>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d203      	bcs.n	8003a04 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <xTaskIncrementTick+0x150>)
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
						break;
 8003a02:	e02f      	b.n	8003a64 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3304      	adds	r3, #4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff f8c2 	bl	8002b92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3318      	adds	r3, #24
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff f8b9 	bl	8002b92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <xTaskIncrementTick+0x154>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d903      	bls.n	8003a34 <xTaskIncrementTick+0xd0>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <xTaskIncrementTick+0x154>)
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	0013      	movs	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <xTaskIncrementTick+0x158>)
 8003a42:	189a      	adds	r2, r3, r2
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	3304      	adds	r3, #4
 8003a48:	0019      	movs	r1, r3
 8003a4a:	0010      	movs	r0, r2
 8003a4c:	f7ff f849 	bl	8002ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <xTaskIncrementTick+0x15c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3b3      	bcc.n	80039c6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a62:	e7b0      	b.n	80039c6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <xTaskIncrementTick+0x15c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	4914      	ldr	r1, [pc, #80]	; (8003abc <xTaskIncrementTick+0x158>)
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	585b      	ldr	r3, [r3, r1]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d907      	bls.n	8003a8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e004      	b.n	8003a8a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <xTaskIncrementTick+0x160>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <xTaskIncrementTick+0x160>)
 8003a88:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <xTaskIncrementTick+0x164>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a96:	697b      	ldr	r3, [r7, #20]
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b006      	add	sp, #24
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000db8 	.word	0x20000db8
 8003aa4:	20000d94 	.word	0x20000d94
 8003aa8:	20000d48 	.word	0x20000d48
 8003aac:	20000d4c 	.word	0x20000d4c
 8003ab0:	20000da8 	.word	0x20000da8
 8003ab4:	20000db0 	.word	0x20000db0
 8003ab8:	20000d98 	.word	0x20000d98
 8003abc:	200008c0 	.word	0x200008c0
 8003ac0:	200008bc 	.word	0x200008bc
 8003ac4:	20000da0 	.word	0x20000da0
 8003ac8:	20000da4 	.word	0x20000da4

08003acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <vTaskSwitchContext+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ada:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <vTaskSwitchContext+0x94>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ae0:	e037      	b.n	8003b52 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <vTaskSwitchContext+0x94>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <vTaskSwitchContext+0x98>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	e007      	b.n	8003b00 <vTaskSwitchContext+0x34>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <vTaskSwitchContext+0x2e>
 8003af6:	b672      	cpsid	i
 8003af8:	e7fe      	b.n	8003af8 <vTaskSwitchContext+0x2c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	4919      	ldr	r1, [pc, #100]	; (8003b68 <vTaskSwitchContext+0x9c>)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	0013      	movs	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	585b      	ldr	r3, [r3, r1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <vTaskSwitchContext+0x24>
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	0013      	movs	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <vTaskSwitchContext+0x9c>)
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d104      	bne.n	8003b42 <vTaskSwitchContext+0x76>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <vTaskSwitchContext+0xa0>)
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <vTaskSwitchContext+0x98>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b002      	add	sp, #8
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	20000db8 	.word	0x20000db8
 8003b60:	20000da4 	.word	0x20000da4
 8003b64:	20000d98 	.word	0x20000d98
 8003b68:	200008c0 	.word	0x200008c0
 8003b6c:	200008bc 	.word	0x200008bc

08003b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <vTaskPlaceOnEventList+0x14>
 8003b80:	b672      	cpsid	i
 8003b82:	e7fe      	b.n	8003b82 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <vTaskPlaceOnEventList+0x38>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3318      	adds	r3, #24
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe ffc8 	bl	8002b26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 fa3c 	bl	8004018 <prvAddCurrentTaskToDelayedList>
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200008bc 	.word	0x200008bc

08003bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <vTaskPlaceOnEventListRestricted+0x16>
 8003bbe:	b672      	cpsid	i
 8003bc0:	e7fe      	b.n	8003bc0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <vTaskPlaceOnEventListRestricted+0x48>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	001a      	movs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fe ff87 	bl	8002ae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	425b      	negs	r3, r3
 8003bde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 fa16 	bl	8004018 <prvAddCurrentTaskToDelayedList>
	}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200008bc 	.word	0x200008bc

08003bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xTaskRemoveFromEventList+0x1a>
 8003c0e:	b672      	cpsid	i
 8003c10:	e7fe      	b.n	8003c10 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3318      	adds	r3, #24
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7fe ffbb 	bl	8002b92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <xTaskRemoveFromEventList+0xa0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11d      	bne.n	8003c60 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	3304      	adds	r3, #4
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fe ffb2 	bl	8002b92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <xTaskRemoveFromEventList+0xa4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d903      	bls.n	8003c42 <xTaskRemoveFromEventList+0x4a>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <xTaskRemoveFromEventList+0xa4>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	0013      	movs	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <xTaskRemoveFromEventList+0xa8>)
 8003c50:	189a      	adds	r2, r3, r2
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3304      	adds	r3, #4
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f7fe ff42 	bl	8002ae2 <vListInsertEnd>
 8003c5e:	e007      	b.n	8003c70 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3318      	adds	r3, #24
 8003c64:	001a      	movs	r2, r3
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskRemoveFromEventList+0xac>)
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7fe ff39 	bl	8002ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <xTaskRemoveFromEventList+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d905      	bls.n	8003c8a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <xTaskRemoveFromEventList+0xb4>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e001      	b.n	8003c8e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000db8 	.word	0x20000db8
 8003c9c:	20000d98 	.word	0x20000d98
 8003ca0:	200008c0 	.word	0x200008c0
 8003ca4:	20000d50 	.word	0x20000d50
 8003ca8:	200008bc 	.word	0x200008bc
 8003cac:	20000da4 	.word	0x20000da4

08003cb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <vTaskInternalSetTimeOutState+0x20>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <vTaskInternalSetTimeOutState+0x24>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000da8 	.word	0x20000da8
 8003cd4:	20000d94 	.word	0x20000d94

08003cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xTaskCheckForTimeOut+0x14>
 8003ce8:	b672      	cpsid	i
 8003cea:	e7fe      	b.n	8003cea <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <xTaskCheckForTimeOut+0x1e>
 8003cf2:	b672      	cpsid	i
 8003cf4:	e7fe      	b.n	8003cf4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003cf6:	f000 fd53 	bl	80047a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <xTaskCheckForTimeOut+0x98>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	d102      	bne.n	8003d18 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e024      	b.n	8003d62 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <xTaskCheckForTimeOut+0x9c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d007      	beq.n	8003d34 <xTaskCheckForTimeOut+0x5c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e016      	b.n	8003d62 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad2      	subs	r2, r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff ffaf 	bl	8003cb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e004      	b.n	8003d62 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003d62:	f000 fd2f 	bl	80047c4 <vPortExitCritical>

	return xReturn;
 8003d66:	697b      	ldr	r3, [r7, #20]
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000d94 	.word	0x20000d94
 8003d74:	20000da8 	.word	0x20000da8

08003d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d7c:	4b02      	ldr	r3, [pc, #8]	; (8003d88 <vTaskMissedYield+0x10>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000da4 	.word	0x20000da4

08003d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d94:	f000 f84e 	bl	8003e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <prvIdleTask+0x1c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d9f9      	bls.n	8003d94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003da0:	f000 fcee 	bl	8004780 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003da4:	e7f6      	b.n	8003d94 <prvIdleTask+0x8>
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	200008c0 	.word	0x200008c0

08003dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	e00c      	b.n	8003dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	0013      	movs	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <prvInitialiseTaskLists+0x68>)
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fe fe62 	bl	8002a90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b37      	cmp	r3, #55	; 0x37
 8003dd6:	d9ef      	bls.n	8003db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <prvInitialiseTaskLists+0x6c>)
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7fe fe58 	bl	8002a90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <prvInitialiseTaskLists+0x70>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fe fe54 	bl	8002a90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <prvInitialiseTaskLists+0x74>)
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fe fe50 	bl	8002a90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvInitialiseTaskLists+0x78>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe fe4c 	bl	8002a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <prvInitialiseTaskLists+0x7c>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fe fe48 	bl	8002a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <prvInitialiseTaskLists+0x80>)
 8003e02:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <prvInitialiseTaskLists+0x6c>)
 8003e04:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <prvInitialiseTaskLists+0x84>)
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <prvInitialiseTaskLists+0x70>)
 8003e0a:	601a      	str	r2, [r3, #0]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200008c0 	.word	0x200008c0
 8003e18:	20000d20 	.word	0x20000d20
 8003e1c:	20000d34 	.word	0x20000d34
 8003e20:	20000d50 	.word	0x20000d50
 8003e24:	20000d64 	.word	0x20000d64
 8003e28:	20000d7c 	.word	0x20000d7c
 8003e2c:	20000d48 	.word	0x20000d48
 8003e30:	20000d4c 	.word	0x20000d4c

08003e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e3a:	e01a      	b.n	8003e72 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003e3c:	f000 fcb0 	bl	80047a0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <prvCheckTasksWaitingTermination+0x50>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fe fea0 	bl	8002b92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <prvCheckTasksWaitingTermination+0x54>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <prvCheckTasksWaitingTermination+0x54>)
 8003e5a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <prvCheckTasksWaitingTermination+0x58>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <prvCheckTasksWaitingTermination+0x58>)
 8003e64:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003e66:	f000 fcad 	bl	80047c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 f80f 	bl	8003e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <prvCheckTasksWaitingTermination+0x58>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e0      	bne.n	8003e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	20000d64 	.word	0x20000d64
 8003e88:	20000d90 	.word	0x20000d90
 8003e8c:	20000d78 	.word	0x20000d78

08003e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2259      	movs	r2, #89	; 0x59
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fdb8 	bl	8004a1c <vPortFree>
				vPortFree( pxTCB );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 fdb4 	bl	8004a1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003eb4:	e010      	b.n	8003ed8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2259      	movs	r2, #89	; 0x59
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d104      	bne.n	8003eca <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 fdaa 	bl	8004a1c <vPortFree>
	}
 8003ec8:	e006      	b.n	8003ed8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2259      	movs	r2, #89	; 0x59
 8003ece:	5c9b      	ldrb	r3, [r3, r2]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d001      	beq.n	8003ed8 <prvDeleteTCB+0x48>
 8003ed4:	b672      	cpsid	i
 8003ed6:	e7fe      	b.n	8003ed6 <prvDeleteTCB+0x46>
	}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <prvResetNextTaskUnblockTime+0x40>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <prvResetNextTaskUnblockTime+0x14>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <prvResetNextTaskUnblockTime+0x16>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <prvResetNextTaskUnblockTime+0x44>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	4252      	negs	r2, r2
 8003f00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f02:	e008      	b.n	8003f16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <prvResetNextTaskUnblockTime+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <prvResetNextTaskUnblockTime+0x44>)
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	20000d48 	.word	0x20000d48
 8003f24:	20000db0 	.word	0x20000db0

08003f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <xTaskGetSchedulerState+0x30>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f36:	2301      	movs	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e008      	b.n	8003f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <xTaskGetSchedulerState+0x34>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f44:	2302      	movs	r3, #2
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e001      	b.n	8003f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f4e:	687b      	ldr	r3, [r7, #4]
	}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000d9c 	.word	0x20000d9c
 8003f5c:	20000db8 	.word	0x20000db8

08003f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d044      	beq.n	8004000 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f76:	4b25      	ldr	r3, [pc, #148]	; (800400c <xTaskPriorityDisinherit+0xac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <xTaskPriorityDisinherit+0x24>
 8003f80:	b672      	cpsid	i
 8003f82:	e7fe      	b.n	8003f82 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <xTaskPriorityDisinherit+0x30>
 8003f8c:	b672      	cpsid	i
 8003f8e:	e7fe      	b.n	8003f8e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	1e5a      	subs	r2, r3, #1
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d02c      	beq.n	8004000 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d128      	bne.n	8004000 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fe fded 	bl	8002b92 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2238      	movs	r2, #56	; 0x38
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <xTaskPriorityDisinherit+0xb0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d903      	bls.n	8003fe0 <xTaskPriorityDisinherit+0x80>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <xTaskPriorityDisinherit+0xb0>)
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	0013      	movs	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <xTaskPriorityDisinherit+0xb4>)
 8003fee:	189a      	adds	r2, r3, r2
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	f7fe fd73 	bl	8002ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004000:	68fb      	ldr	r3, [r7, #12]
	}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b004      	add	sp, #16
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	200008bc 	.word	0x200008bc
 8004010:	20000d98 	.word	0x20000d98
 8004014:	200008c0 	.word	0x200008c0

08004018 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <prvAddCurrentTaskToDelayedList+0x94>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3304      	adds	r3, #4
 800402e:	0018      	movs	r0, r3
 8004030:	f7fe fdaf 	bl	8002b92 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3301      	adds	r3, #1
 8004038:	d10b      	bne.n	8004052 <prvAddCurrentTaskToDelayedList+0x3a>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1d1a      	adds	r2, r3, #4
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004048:	0011      	movs	r1, r2
 800404a:	0018      	movs	r0, r3
 800404c:	f7fe fd49 	bl	8002ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004050:	e026      	b.n	80040a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	18d3      	adds	r3, r2, r3
 8004058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <prvAddCurrentTaskToDelayedList+0x94>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	429a      	cmp	r2, r3
 8004068:	d209      	bcs.n	800407e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3304      	adds	r3, #4
 8004074:	0019      	movs	r1, r3
 8004076:	0010      	movs	r0, r2
 8004078:	f7fe fd55 	bl	8002b26 <vListInsert>
}
 800407c:	e010      	b.n	80040a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3304      	adds	r3, #4
 8004088:	0019      	movs	r1, r3
 800408a:	0010      	movs	r0, r2
 800408c:	f7fe fd4b 	bl	8002b26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d202      	bcs.n	80040a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	601a      	str	r2, [r3, #0]
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000d94 	.word	0x20000d94
 80040ac:	200008bc 	.word	0x200008bc
 80040b0:	20000d7c 	.word	0x20000d7c
 80040b4:	20000d4c 	.word	0x20000d4c
 80040b8:	20000d48 	.word	0x20000d48
 80040bc:	20000db0 	.word	0x20000db0

080040c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040ca:	f000 fa8b 	bl	80045e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <xTimerCreateTimerTask+0x6c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d020      	beq.n	8004118 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040de:	003a      	movs	r2, r7
 80040e0:	1d39      	adds	r1, r7, #4
 80040e2:	2308      	movs	r3, #8
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fe fcba 	bl	8002a60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040ec:	683c      	ldr	r4, [r7, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <xTimerCreateTimerTask+0x70>)
 80040f4:	480f      	ldr	r0, [pc, #60]	; (8004134 <xTimerCreateTimerTask+0x74>)
 80040f6:	9202      	str	r2, [sp, #8]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	2302      	movs	r3, #2
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2300      	movs	r3, #0
 8004100:	0022      	movs	r2, r4
 8004102:	f7ff f996 	bl	8003432 <xTaskCreateStatic>
 8004106:	0002      	movs	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <xTimerCreateTimerTask+0x78>)
 800410a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <xTimerCreateTimerTask+0x78>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xTimerCreateTimerTask+0x62>
 800411e:	b672      	cpsid	i
 8004120:	e7fe      	b.n	8004120 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b005      	add	sp, #20
 800412a:	bd90      	pop	{r4, r7, pc}
 800412c:	20000dec 	.word	0x20000dec
 8004130:	0800566c 	.word	0x0800566c
 8004134:	08004245 	.word	0x08004245
 8004138:	20000df0 	.word	0x20000df0

0800413c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <xTimerGenericCommand+0x1c>
 8004154:	b672      	cpsid	i
 8004156:	e7fe      	b.n	8004156 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <xTimerGenericCommand+0x94>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d031      	beq.n	80041c4 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004160:	2114      	movs	r1, #20
 8004162:	187b      	adds	r3, r7, r1
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004168:	187b      	adds	r3, r7, r1
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b05      	cmp	r3, #5
 8004178:	dc1a      	bgt.n	80041b0 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800417a:	f7ff fed5 	bl	8003f28 <xTaskGetSchedulerState>
 800417e:	0003      	movs	r3, r0
 8004180:	2b02      	cmp	r3, #2
 8004182:	d10a      	bne.n	800419a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <xTimerGenericCommand+0x94>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	2314      	movs	r3, #20
 800418c:	18f9      	adds	r1, r7, r3
 800418e:	2300      	movs	r3, #0
 8004190:	f7fe fded 	bl	8002d6e <xQueueGenericSend>
 8004194:	0003      	movs	r3, r0
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	e014      	b.n	80041c4 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTimerGenericCommand+0x94>)
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	2314      	movs	r3, #20
 80041a0:	18f9      	adds	r1, r7, r3
 80041a2:	2300      	movs	r3, #0
 80041a4:	2200      	movs	r2, #0
 80041a6:	f7fe fde2 	bl	8002d6e <xQueueGenericSend>
 80041aa:	0003      	movs	r3, r0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	e009      	b.n	80041c4 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <xTimerGenericCommand+0x94>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	2314      	movs	r3, #20
 80041b8:	18f9      	adds	r1, r7, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	f7fe fe9b 	bl	8002ef6 <xQueueGenericSendFromISR>
 80041c0:	0003      	movs	r3, r0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b00a      	add	sp, #40	; 0x28
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000dec 	.word	0x20000dec

080041d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <prvProcessExpiredTimer+0x6c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3304      	adds	r3, #4
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fe fcd0 	bl	8002b92 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d119      	bne.n	800422e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f8b6 	bl	8004378 <prvInsertTimerInActiveList>
 800420c:	1e03      	subs	r3, r0, #0
 800420e:	d00e      	beq.n	800422e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	2300      	movs	r3, #0
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	2100      	movs	r1, #0
 800421c:	f7ff ff8e 	bl	800413c <xTimerGenericCommand>
 8004220:	0003      	movs	r3, r0
 8004222:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <prvProcessExpiredTimer+0x5a>
 800422a:	b672      	cpsid	i
 800422c:	e7fe      	b.n	800422c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	0010      	movs	r0, r2
 8004236:	4798      	blx	r3
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000de4 	.word	0x20000de4

08004244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800424c:	2308      	movs	r3, #8
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	0018      	movs	r0, r3
 8004252:	f000 f851 	bl	80042f8 <prvGetNextExpireTime>
 8004256:	0003      	movs	r3, r0
 8004258:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0011      	movs	r1, r2
 8004260:	0018      	movs	r0, r3
 8004262:	f000 f803 	bl	800426c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004266:	f000 f8c9 	bl	80043fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800426a:	e7ef      	b.n	800424c <prvTimerTask+0x8>

0800426c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004276:	f7ff facf 	bl	8003818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800427a:	2308      	movs	r3, #8
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f85a 	bl	8004338 <prvSampleTimeNow>
 8004284:	0003      	movs	r3, r0
 8004286:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d129      	bne.n	80042e2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10c      	bne.n	80042ae <prvProcessTimerOrBlockTask+0x42>
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	429a      	cmp	r2, r3
 800429a:	d808      	bhi.n	80042ae <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800429c:	f7ff fac8 	bl	8003830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff ff94 	bl	80041d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042ac:	e01b      	b.n	80042e6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d006      	beq.n	80042c2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <prvProcessTimerOrBlockTask+0x84>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	425a      	negs	r2, r3
 80042bc:	4153      	adcs	r3, r2
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvProcessTimerOrBlockTask+0x88>)
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	0019      	movs	r1, r3
 80042d0:	f7ff f87c 	bl	80033cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042d4:	f7ff faac 	bl	8003830 <xTaskResumeAll>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d104      	bne.n	80042e6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80042dc:	f000 fa50 	bl	8004780 <vPortYield>
}
 80042e0:	e001      	b.n	80042e6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80042e2:	f7ff faa5 	bl	8003830 <xTaskResumeAll>
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000de8 	.word	0x20000de8
 80042f4:	20000dec 	.word	0x20000dec

080042f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <prvGetNextExpireTime+0x3c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	425a      	negs	r2, r3
 8004308:	4153      	adcs	r3, r2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	001a      	movs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <prvGetNextExpireTime+0x3c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b004      	add	sp, #16
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000de4 	.word	0x20000de4

08004338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004340:	f7ff fb02 	bl	8003948 <xTaskGetTickCount>
 8004344:	0003      	movs	r3, r0
 8004346:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <prvSampleTimeNow+0x3c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	429a      	cmp	r2, r3
 8004350:	d205      	bcs.n	800435e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004352:	f000 f8ed 	bl	8004530 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e002      	b.n	8004364 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <prvSampleTimeNow+0x3c>)
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000df4 	.word	0x20000df4

08004378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	d812      	bhi.n	80043c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e01b      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <prvInsertTimerInActiveList+0x7c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	0019      	movs	r1, r3
 80043bc:	0010      	movs	r0, r2
 80043be:	f7fe fbb2 	bl	8002b26 <vListInsert>
 80043c2:	e012      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d206      	bcs.n	80043da <prvInsertTimerInActiveList+0x62>
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e007      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvInsertTimerInActiveList+0x80>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3304      	adds	r3, #4
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f7fe fb9e 	bl	8002b26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b006      	add	sp, #24
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000de8 	.word	0x20000de8
 80043f8:	20000de4 	.word	0x20000de4

080043fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004402:	e082      	b.n	800450a <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004404:	2308      	movs	r3, #8
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da10      	bge.n	8004430 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800440e:	2308      	movs	r3, #8
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	3304      	adds	r3, #4
 8004414:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <prvProcessReceivedCommands+0x24>
 800441c:	b672      	cpsid	i
 800441e:	e7fe      	b.n	800441e <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	6858      	ldr	r0, [r3, #4]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	0019      	movs	r1, r3
 800442e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004430:	2308      	movs	r3, #8
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db66      	blt.n	8004508 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800443a:	2308      	movs	r3, #8
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	3304      	adds	r3, #4
 800444e:	0018      	movs	r0, r3
 8004450:	f7fe fb9f 	bl	8002b92 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff ff6e 	bl	8004338 <prvSampleTimeNow>
 800445c:	0003      	movs	r3, r0
 800445e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004460:	2308      	movs	r3, #8
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b09      	cmp	r3, #9
 8004468:	d84f      	bhi.n	800450a <prvProcessReceivedCommands+0x10e>
 800446a:	009a      	lsls	r2, r3, #2
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <prvProcessReceivedCommands+0x12c>)
 800446e:	18d3      	adds	r3, r2, r3
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004474:	2008      	movs	r0, #8
 8004476:	183b      	adds	r3, r7, r0
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	18d1      	adds	r1, r2, r3
 8004480:	183b      	adds	r3, r7, r0
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	6a38      	ldr	r0, [r7, #32]
 8004488:	f7ff ff76 	bl	8004378 <prvInsertTimerInActiveList>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d03c      	beq.n	800450a <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	0010      	movs	r0, r2
 8004498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d133      	bne.n	800450a <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044a2:	2308      	movs	r3, #8
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	18d2      	adds	r2, r2, r3
 80044ae:	6a38      	ldr	r0, [r7, #32]
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	f7ff fe40 	bl	800413c <xTimerGenericCommand>
 80044bc:	0003      	movs	r3, r0
 80044be:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <prvProcessReceivedCommands+0x10e>
 80044c6:	b672      	cpsid	i
 80044c8:	e7fe      	b.n	80044c8 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044ca:	2308      	movs	r3, #8
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <prvProcessReceivedCommands+0xe4>
 80044dc:	b672      	cpsid	i
 80044de:	e7fe      	b.n	80044de <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	18d1      	adds	r1, r2, r3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	6a38      	ldr	r0, [r7, #32]
 80044ee:	f7ff ff43 	bl	8004378 <prvInsertTimerInActiveList>
					break;
 80044f2:	e00a      	b.n	800450a <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	222c      	movs	r2, #44	; 0x2c
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fa8b 	bl	8004a1c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004506:	e000      	b.n	800450a <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004508:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <prvProcessReceivedCommands+0x130>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2208      	movs	r2, #8
 8004510:	18b9      	adds	r1, r7, r2
 8004512:	2200      	movs	r2, #0
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fd5f 	bl	8002fd8 <xQueueReceive>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d000      	beq.n	8004520 <prvProcessReceivedCommands+0x124>
 800451e:	e771      	b.n	8004404 <prvProcessReceivedCommands+0x8>
	}
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b00a      	add	sp, #40	; 0x28
 8004526:	bd80      	pop	{r7, pc}
 8004528:	080056dc 	.word	0x080056dc
 800452c:	20000dec 	.word	0x20000dec

08004530 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004536:	e03e      	b.n	80045b6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <prvSwitchTimerLists+0xac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <prvSwitchTimerLists+0xac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3304      	adds	r3, #4
 8004550:	0018      	movs	r0, r3
 8004552:	f7fe fb1e 	bl	8002b92 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	0010      	movs	r0, r2
 800455e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d126      	bne.n	80045b6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	429a      	cmp	r2, r3
 8004578:	d90e      	bls.n	8004598 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <prvSwitchTimerLists+0xac>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	0019      	movs	r1, r3
 8004590:	0010      	movs	r0, r2
 8004592:	f7fe fac8 	bl	8002b26 <vListInsert>
 8004596:	e00e      	b.n	80045b6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	2100      	movs	r1, #0
 80045a4:	f7ff fdca 	bl	800413c <xTimerGenericCommand>
 80045a8:	0003      	movs	r3, r0
 80045aa:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <prvSwitchTimerLists+0x86>
 80045b2:	b672      	cpsid	i
 80045b4:	e7fe      	b.n	80045b4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <prvSwitchTimerLists+0xac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1bb      	bne.n	8004538 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvSwitchTimerLists+0xac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <prvSwitchTimerLists+0xb0>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <prvSwitchTimerLists+0xac>)
 80045cc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <prvSwitchTimerLists+0xb0>)
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000de4 	.word	0x20000de4
 80045e0:	20000de8 	.word	0x20000de8

080045e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045ea:	f000 f8d9 	bl	80047a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <prvCheckForValidListAndQueue+0x68>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d124      	bne.n	8004640 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <prvCheckForValidListAndQueue+0x6c>)
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fe fa49 	bl	8002a90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045fe:	4b15      	ldr	r3, [pc, #84]	; (8004654 <prvCheckForValidListAndQueue+0x70>)
 8004600:	0018      	movs	r0, r3
 8004602:	f7fe fa45 	bl	8002a90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <prvCheckForValidListAndQueue+0x74>)
 8004608:	4a11      	ldr	r2, [pc, #68]	; (8004650 <prvCheckForValidListAndQueue+0x6c>)
 800460a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <prvCheckForValidListAndQueue+0x78>)
 800460e:	4a11      	ldr	r2, [pc, #68]	; (8004654 <prvCheckForValidListAndQueue+0x70>)
 8004610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004612:	4913      	ldr	r1, [pc, #76]	; (8004660 <prvCheckForValidListAndQueue+0x7c>)
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <prvCheckForValidListAndQueue+0x80>)
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	000b      	movs	r3, r1
 800461c:	2110      	movs	r1, #16
 800461e:	200a      	movs	r0, #10
 8004620:	f7fe fb33 	bl	8002c8a <xQueueGenericCreateStatic>
 8004624:	0002      	movs	r2, r0
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <prvCheckForValidListAndQueue+0x68>)
 8004628:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <prvCheckForValidListAndQueue+0x68>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <prvCheckForValidListAndQueue+0x68>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <prvCheckForValidListAndQueue+0x84>)
 8004638:	0011      	movs	r1, r2
 800463a:	0018      	movs	r0, r3
 800463c:	f7fe fe9e 	bl	800337c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004640:	f000 f8c0 	bl	80047c4 <vPortExitCritical>
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	20000dec 	.word	0x20000dec
 8004650:	20000dbc 	.word	0x20000dbc
 8004654:	20000dd0 	.word	0x20000dd0
 8004658:	20000de4 	.word	0x20000de4
 800465c:	20000de8 	.word	0x20000de8
 8004660:	20000e98 	.word	0x20000e98
 8004664:	20000df8 	.word	0x20000df8
 8004668:	08005674 	.word	0x08005674

0800466c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3b04      	subs	r3, #4
 800467c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	0452      	lsls	r2, r2, #17
 8004684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b04      	subs	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b04      	subs	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <pxPortInitialiseStack+0x50>)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b14      	subs	r3, #20
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b20      	subs	r3, #32
 80046ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046b0:	68fb      	ldr	r3, [r7, #12]
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	080046c1 	.word	0x080046c1

080046c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvTaskExitError+0x28>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	d001      	beq.n	80046d6 <prvTaskExitError+0x16>
 80046d2:	b672      	cpsid	i
 80046d4:	e7fe      	b.n	80046d4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80046d6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0fc      	beq.n	80046da <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000008 	.word	0x20000008

080046ec <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

08004700 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004700:	4a0b      	ldr	r2, [pc, #44]	; (8004730 <pxCurrentTCBConst2>)
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	3020      	adds	r0, #32
 8004708:	f380 8809 	msr	PSP, r0
 800470c:	2002      	movs	r0, #2
 800470e:	f380 8814 	msr	CONTROL, r0
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004718:	46ae      	mov	lr, r5
 800471a:	bc08      	pop	{r3}
 800471c:	bc04      	pop	{r2}
 800471e:	b662      	cpsie	i
 8004720:	4718      	bx	r3
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46c0      	nop			; (mov r8, r8)

08004730 <pxCurrentTCBConst2>:
 8004730:	200008bc 	.word	0x200008bc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46c0      	nop			; (mov r8, r8)

08004738 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <xPortStartScheduler+0x40>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <xPortStartScheduler+0x40>)
 8004742:	21ff      	movs	r1, #255	; 0xff
 8004744:	0409      	lsls	r1, r1, #16
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <xPortStartScheduler+0x40>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <xPortStartScheduler+0x40>)
 8004750:	21ff      	movs	r1, #255	; 0xff
 8004752:	0609      	lsls	r1, r1, #24
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004758:	f000 f898 	bl	800488c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <xPortStartScheduler+0x44>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004762:	f7ff ffcd 	bl	8004700 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004766:	f7ff f9b1 	bl	8003acc <vTaskSwitchContext>
	prvTaskExitError();
 800476a:	f7ff ffa9 	bl	80046c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800476e:	2300      	movs	r3, #0
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	e000ed20 	.word	0xe000ed20
 800477c:	20000008 	.word	0x20000008

08004780 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <vPortYield+0x1c>)
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	0552      	lsls	r2, r2, #21
 800478a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800478c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004790:	f3bf 8f6f 	isb	sy
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80047a4:	b672      	cpsid	i
    uxCriticalNesting++;
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <vPortEnterCritical+0x20>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortEnterCritical+0x20>)
 80047ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80047b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047b4:	f3bf 8f6f 	isb	sy
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	20000008 	.word	0x20000008

080047c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <vPortExitCritical+0x2c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <vPortExitCritical+0x10>
 80047d0:	b672      	cpsid	i
 80047d2:	e7fe      	b.n	80047d2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <vPortExitCritical+0x2c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <vPortExitCritical+0x2c>)
 80047dc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <vPortExitCritical+0x2c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d100      	bne.n	80047e8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80047e6:	b662      	cpsie	i
    }
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000008 	.word	0x20000008

080047f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80047f4:	f3ef 8010 	mrs	r0, PRIMASK
 80047f8:	b672      	cpsid	i
 80047fa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	0018      	movs	r0, r3

08004800 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004800:	f380 8810 	msr	PRIMASK, r0
 8004804:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004806:	46c0      	nop			; (mov r8, r8)
	...

08004810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004810:	f3ef 8009 	mrs	r0, PSP
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <pxCurrentTCBConst>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	3820      	subs	r0, #32
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800481e:	4644      	mov	r4, r8
 8004820:	464d      	mov	r5, r9
 8004822:	4656      	mov	r6, sl
 8004824:	465f      	mov	r7, fp
 8004826:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004828:	b508      	push	{r3, lr}
 800482a:	b672      	cpsid	i
 800482c:	f7ff f94e 	bl	8003acc <vTaskSwitchContext>
 8004830:	b662      	cpsie	i
 8004832:	bc0c      	pop	{r2, r3}
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	6808      	ldr	r0, [r1, #0]
 8004838:	3010      	adds	r0, #16
 800483a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800483c:	46a0      	mov	r8, r4
 800483e:	46a9      	mov	r9, r5
 8004840:	46b2      	mov	sl, r6
 8004842:	46bb      	mov	fp, r7
 8004844:	f380 8809 	msr	PSP, r0
 8004848:	3820      	subs	r0, #32
 800484a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800484c:	4718      	bx	r3
 800484e:	46c0      	nop			; (mov r8, r8)

08004850 <pxCurrentTCBConst>:
 8004850:	200008bc 	.word	0x200008bc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46c0      	nop			; (mov r8, r8)

08004858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800485e:	f7ff ffc9 	bl	80047f4 <ulSetInterruptMaskFromISR>
 8004862:	0003      	movs	r3, r0
 8004864:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004866:	f7ff f87d 	bl	8003964 <xTaskIncrementTick>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d003      	beq.n	8004876 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <SysTick_Handler+0x30>)
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	0552      	lsls	r2, r2, #21
 8004874:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff ffc1 	bl	8004800 <vClearInterruptMaskFromISR>
}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	46bd      	mov	sp, r7
 8004882:	b002      	add	sp, #8
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <prvSetupTimerInterrupt+0x34>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvSetupTimerInterrupt+0x38>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvSetupTimerInterrupt+0x3c>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	23fa      	movs	r3, #250	; 0xfa
 80048a2:	0099      	lsls	r1, r3, #2
 80048a4:	0010      	movs	r0, r2
 80048a6:	f7fb fc37 	bl	8000118 <__udivsi3>
 80048aa:	0003      	movs	r3, r0
 80048ac:	001a      	movs	r2, r3
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <prvSetupTimerInterrupt+0x40>)
 80048b0:	3a01      	subs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80048b4:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <prvSetupTimerInterrupt+0x34>)
 80048b6:	2207      	movs	r2, #7
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	e000e010 	.word	0xe000e010
 80048c4:	e000e018 	.word	0xe000e018
 80048c8:	20000000 	.word	0x20000000
 80048cc:	e000e014 	.word	0xe000e014

080048d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80048dc:	f7fe ff9c 	bl	8003818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048e0:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <pvPortMalloc+0x138>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048e8:	f000 f8e0 	bl	8004aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048ec:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <pvPortMalloc+0x13c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4013      	ands	r3, r2
 80048f4:	d000      	beq.n	80048f8 <pvPortMalloc+0x28>
 80048f6:	e079      	b.n	80049ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80048fe:	2208      	movs	r2, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	189b      	adds	r3, r3, r2
 8004904:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	d00a      	beq.n	8004924 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2207      	movs	r2, #7
 8004912:	4393      	bics	r3, r2
 8004914:	3308      	adds	r3, #8
 8004916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2207      	movs	r2, #7
 800491c:	4013      	ands	r3, r2
 800491e:	d001      	beq.n	8004924 <pvPortMalloc+0x54>
 8004920:	b672      	cpsid	i
 8004922:	e7fe      	b.n	8004922 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d060      	beq.n	80049ec <pvPortMalloc+0x11c>
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <pvPortMalloc+0x140>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d85b      	bhi.n	80049ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004934:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <pvPortMalloc+0x144>)
 8004936:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <pvPortMalloc+0x144>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	e004      	b.n	800494a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d903      	bls.n	800495c <pvPortMalloc+0x8c>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f1      	bne.n	8004940 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <pvPortMalloc+0x138>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	429a      	cmp	r2, r3
 8004964:	d042      	beq.n	80049ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2208      	movs	r2, #8
 800496c:	189b      	adds	r3, r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	2308      	movs	r3, #8
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d916      	bls.n	80049b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	18d3      	adds	r3, r2, r3
 800498e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2207      	movs	r2, #7
 8004994:	4013      	ands	r3, r2
 8004996:	d001      	beq.n	800499c <pvPortMalloc+0xcc>
 8004998:	b672      	cpsid	i
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f8db 	bl	8004b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <pvPortMalloc+0x140>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <pvPortMalloc+0x140>)
 80049c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049c4:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <pvPortMalloc+0x140>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <pvPortMalloc+0x148>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d203      	bcs.n	80049d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <pvPortMalloc+0x140>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <pvPortMalloc+0x148>)
 80049d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <pvPortMalloc+0x13c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049ec:	f7fe ff20 	bl	8003830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2207      	movs	r2, #7
 80049f4:	4013      	ands	r3, r2
 80049f6:	d001      	beq.n	80049fc <pvPortMalloc+0x12c>
 80049f8:	b672      	cpsid	i
 80049fa:	e7fe      	b.n	80049fa <pvPortMalloc+0x12a>
	return pvReturn;
 80049fc:	68fb      	ldr	r3, [r7, #12]
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b006      	add	sp, #24
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20001af0 	.word	0x20001af0
 8004a0c:	20001afc 	.word	0x20001afc
 8004a10:	20001af4 	.word	0x20001af4
 8004a14:	20001ae8 	.word	0x20001ae8
 8004a18:	20001af8 	.word	0x20001af8

08004a1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d035      	beq.n	8004a9a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a2e:	2308      	movs	r3, #8
 8004a30:	425b      	negs	r3, r3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	18d3      	adds	r3, r2, r3
 8004a36:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <vPortFree+0x88>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4013      	ands	r3, r2
 8004a46:	d101      	bne.n	8004a4c <vPortFree+0x30>
 8004a48:	b672      	cpsid	i
 8004a4a:	e7fe      	b.n	8004a4a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <vPortFree+0x3c>
 8004a54:	b672      	cpsid	i
 8004a56:	e7fe      	b.n	8004a56 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <vPortFree+0x88>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4013      	ands	r3, r2
 8004a62:	d01a      	beq.n	8004a9a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d116      	bne.n	8004a9a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <vPortFree+0x88>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a7c:	f7fe fecc 	bl	8003818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <vPortFree+0x8c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	18d2      	adds	r2, r2, r3
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <vPortFree+0x8c>)
 8004a8c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f86b 	bl	8004b6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a96:	f7fe fecb 	bl	8003830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b004      	add	sp, #16
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	20001afc 	.word	0x20001afc
 8004aa8:	20001af4 	.word	0x20001af4

08004aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ab2:	23c0      	movs	r3, #192	; 0xc0
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <prvHeapInit+0xa8>)
 8004aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2207      	movs	r2, #7
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d00c      	beq.n	8004ade <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3307      	adds	r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2207      	movs	r2, #7
 8004ace:	4393      	bics	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <prvHeapInit+0xa8>)
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <prvHeapInit+0xac>)
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <prvHeapInit+0xac>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	18d3      	adds	r3, r2, r3
 8004af4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004af6:	2208      	movs	r2, #8
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2207      	movs	r2, #7
 8004b02:	4393      	bics	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <prvHeapInit+0xb0>)
 8004b0a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <prvHeapInit+0xb0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <prvHeapInit+0xb0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	1ad2      	subs	r2, r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <prvHeapInit+0xb0>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <prvHeapInit+0xb4>)
 8004b38:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <prvHeapInit+0xb8>)
 8004b40:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <prvHeapInit+0xbc>)
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	0612      	lsls	r2, r2, #24
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	20000ee8 	.word	0x20000ee8
 8004b58:	20001ae8 	.word	0x20001ae8
 8004b5c:	20001af0 	.word	0x20001af0
 8004b60:	20001af8 	.word	0x20001af8
 8004b64:	20001af4 	.word	0x20001af4
 8004b68:	20001afc 	.word	0x20001afc

08004b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <prvInsertBlockIntoFreeList+0xa8>)
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <prvInsertBlockIntoFreeList+0x14>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d8f7      	bhi.n	8004b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d108      	bne.n	8004bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	18d2      	adds	r2, r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d118      	bne.n	8004bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <prvInsertBlockIntoFreeList+0xac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d00d      	beq.n	8004bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	18d2      	adds	r2, r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e008      	b.n	8004bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <prvInsertBlockIntoFreeList+0xac>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e003      	b.n	8004bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d002      	beq.n	8004c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	20001ae8 	.word	0x20001ae8
 8004c18:	20001af0 	.word	0x20001af0

08004c1c <atoi>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	220a      	movs	r2, #10
 8004c20:	2100      	movs	r1, #0
 8004c22:	f000 f8df 	bl	8004de4 <strtol>
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <__errno>:
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <__errno+0x8>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	2000000c 	.word	0x2000000c

08004c34 <__libc_init_array>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	2600      	movs	r6, #0
 8004c38:	4d0c      	ldr	r5, [pc, #48]	; (8004c6c <__libc_init_array+0x38>)
 8004c3a:	4c0d      	ldr	r4, [pc, #52]	; (8004c70 <__libc_init_array+0x3c>)
 8004c3c:	1b64      	subs	r4, r4, r5
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	42a6      	cmp	r6, r4
 8004c42:	d109      	bne.n	8004c58 <__libc_init_array+0x24>
 8004c44:	2600      	movs	r6, #0
 8004c46:	f000 fce1 	bl	800560c <_init>
 8004c4a:	4d0a      	ldr	r5, [pc, #40]	; (8004c74 <__libc_init_array+0x40>)
 8004c4c:	4c0a      	ldr	r4, [pc, #40]	; (8004c78 <__libc_init_array+0x44>)
 8004c4e:	1b64      	subs	r4, r4, r5
 8004c50:	10a4      	asrs	r4, r4, #2
 8004c52:	42a6      	cmp	r6, r4
 8004c54:	d105      	bne.n	8004c62 <__libc_init_array+0x2e>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	00b3      	lsls	r3, r6, #2
 8004c5a:	58eb      	ldr	r3, [r5, r3]
 8004c5c:	4798      	blx	r3
 8004c5e:	3601      	adds	r6, #1
 8004c60:	e7ee      	b.n	8004c40 <__libc_init_array+0xc>
 8004c62:	00b3      	lsls	r3, r6, #2
 8004c64:	58eb      	ldr	r3, [r5, r3]
 8004c66:	4798      	blx	r3
 8004c68:	3601      	adds	r6, #1
 8004c6a:	e7f2      	b.n	8004c52 <__libc_init_array+0x1e>
 8004c6c:	08005844 	.word	0x08005844
 8004c70:	08005844 	.word	0x08005844
 8004c74:	08005844 	.word	0x08005844
 8004c78:	08005848 	.word	0x08005848

08004c7c <memcpy>:
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d100      	bne.n	8004c86 <memcpy+0xa>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	5ccc      	ldrb	r4, [r1, r3]
 8004c88:	54c4      	strb	r4, [r0, r3]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	e7f8      	b.n	8004c80 <memcpy+0x4>

08004c8e <memset>:
 8004c8e:	0003      	movs	r3, r0
 8004c90:	1812      	adds	r2, r2, r0
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d100      	bne.n	8004c98 <memset+0xa>
 8004c96:	4770      	bx	lr
 8004c98:	7019      	strb	r1, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	e7f9      	b.n	8004c92 <memset+0x4>
	...

08004ca0 <siprintf>:
 8004ca0:	b40e      	push	{r1, r2, r3}
 8004ca2:	b500      	push	{lr}
 8004ca4:	490b      	ldr	r1, [pc, #44]	; (8004cd4 <siprintf+0x34>)
 8004ca6:	b09c      	sub	sp, #112	; 0x70
 8004ca8:	ab1d      	add	r3, sp, #116	; 0x74
 8004caa:	9002      	str	r0, [sp, #8]
 8004cac:	9006      	str	r0, [sp, #24]
 8004cae:	9107      	str	r1, [sp, #28]
 8004cb0:	9104      	str	r1, [sp, #16]
 8004cb2:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <siprintf+0x38>)
 8004cb4:	4909      	ldr	r1, [pc, #36]	; (8004cdc <siprintf+0x3c>)
 8004cb6:	cb04      	ldmia	r3!, {r2}
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	a902      	add	r1, sp, #8
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	f000 f91c 	bl	8004efc <_svfiprintf_r>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9a02      	ldr	r2, [sp, #8]
 8004cc8:	7013      	strb	r3, [r2, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	bc08      	pop	{r3}
 8004cce:	b003      	add	sp, #12
 8004cd0:	4718      	bx	r3
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	7fffffff 	.word	0x7fffffff
 8004cd8:	2000000c 	.word	0x2000000c
 8004cdc:	ffff0208 	.word	0xffff0208

08004ce0 <_strtol_l.isra.0>:
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	001f      	movs	r7, r3
 8004ce4:	000e      	movs	r6, r1
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	9005      	str	r0, [sp, #20]
 8004cea:	9101      	str	r1, [sp, #4]
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cf0:	7834      	ldrb	r4, [r6, #0]
 8004cf2:	f000 f88b 	bl	8004e0c <__locale_ctype_ptr_l>
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	1900      	adds	r0, r0, r4
 8004cfa:	7843      	ldrb	r3, [r0, #1]
 8004cfc:	1c75      	adds	r5, r6, #1
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d136      	bne.n	8004d70 <_strtol_l.isra.0+0x90>
 8004d02:	2c2d      	cmp	r4, #45	; 0x2d
 8004d04:	d136      	bne.n	8004d74 <_strtol_l.isra.0+0x94>
 8004d06:	1cb5      	adds	r5, r6, #2
 8004d08:	7874      	ldrb	r4, [r6, #1]
 8004d0a:	2601      	movs	r6, #1
 8004d0c:	2f00      	cmp	r7, #0
 8004d0e:	d062      	beq.n	8004dd6 <_strtol_l.isra.0+0xf6>
 8004d10:	2f10      	cmp	r7, #16
 8004d12:	d109      	bne.n	8004d28 <_strtol_l.isra.0+0x48>
 8004d14:	2c30      	cmp	r4, #48	; 0x30
 8004d16:	d107      	bne.n	8004d28 <_strtol_l.isra.0+0x48>
 8004d18:	2220      	movs	r2, #32
 8004d1a:	782b      	ldrb	r3, [r5, #0]
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	2b58      	cmp	r3, #88	; 0x58
 8004d20:	d154      	bne.n	8004dcc <_strtol_l.isra.0+0xec>
 8004d22:	2710      	movs	r7, #16
 8004d24:	786c      	ldrb	r4, [r5, #1]
 8004d26:	3502      	adds	r5, #2
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <_strtol_l.isra.0+0x100>)
 8004d2a:	0039      	movs	r1, r7
 8004d2c:	18f3      	adds	r3, r6, r3
 8004d2e:	0018      	movs	r0, r3
 8004d30:	9303      	str	r3, [sp, #12]
 8004d32:	f7fb fa77 	bl	8000224 <__aeabi_uidivmod>
 8004d36:	9104      	str	r1, [sp, #16]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4249      	negs	r1, r1
 8004d3e:	0002      	movs	r2, r0
 8004d40:	468c      	mov	ip, r1
 8004d42:	0018      	movs	r0, r3
 8004d44:	0021      	movs	r1, r4
 8004d46:	3930      	subs	r1, #48	; 0x30
 8004d48:	2909      	cmp	r1, #9
 8004d4a:	d81a      	bhi.n	8004d82 <_strtol_l.isra.0+0xa2>
 8004d4c:	000c      	movs	r4, r1
 8004d4e:	42a7      	cmp	r7, r4
 8004d50:	dd23      	ble.n	8004d9a <_strtol_l.isra.0+0xba>
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	d009      	beq.n	8004d6a <_strtol_l.isra.0+0x8a>
 8004d56:	4663      	mov	r3, ip
 8004d58:	4282      	cmp	r2, r0
 8004d5a:	d306      	bcc.n	8004d6a <_strtol_l.isra.0+0x8a>
 8004d5c:	d102      	bne.n	8004d64 <_strtol_l.isra.0+0x84>
 8004d5e:	9904      	ldr	r1, [sp, #16]
 8004d60:	42a1      	cmp	r1, r4
 8004d62:	db02      	blt.n	8004d6a <_strtol_l.isra.0+0x8a>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4378      	muls	r0, r7
 8004d68:	1820      	adds	r0, r4, r0
 8004d6a:	782c      	ldrb	r4, [r5, #0]
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	e7e9      	b.n	8004d44 <_strtol_l.isra.0+0x64>
 8004d70:	002e      	movs	r6, r5
 8004d72:	e7bc      	b.n	8004cee <_strtol_l.isra.0+0xe>
 8004d74:	2c2b      	cmp	r4, #43	; 0x2b
 8004d76:	d001      	beq.n	8004d7c <_strtol_l.isra.0+0x9c>
 8004d78:	001e      	movs	r6, r3
 8004d7a:	e7c7      	b.n	8004d0c <_strtol_l.isra.0+0x2c>
 8004d7c:	1cb5      	adds	r5, r6, #2
 8004d7e:	7874      	ldrb	r4, [r6, #1]
 8004d80:	e7fa      	b.n	8004d78 <_strtol_l.isra.0+0x98>
 8004d82:	0021      	movs	r1, r4
 8004d84:	3941      	subs	r1, #65	; 0x41
 8004d86:	2919      	cmp	r1, #25
 8004d88:	d801      	bhi.n	8004d8e <_strtol_l.isra.0+0xae>
 8004d8a:	3c37      	subs	r4, #55	; 0x37
 8004d8c:	e7df      	b.n	8004d4e <_strtol_l.isra.0+0x6e>
 8004d8e:	0021      	movs	r1, r4
 8004d90:	3961      	subs	r1, #97	; 0x61
 8004d92:	2919      	cmp	r1, #25
 8004d94:	d801      	bhi.n	8004d9a <_strtol_l.isra.0+0xba>
 8004d96:	3c57      	subs	r4, #87	; 0x57
 8004d98:	e7d9      	b.n	8004d4e <_strtol_l.isra.0+0x6e>
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	d108      	bne.n	8004db0 <_strtol_l.isra.0+0xd0>
 8004d9e:	9a05      	ldr	r2, [sp, #20]
 8004da0:	3323      	adds	r3, #35	; 0x23
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	9803      	ldr	r0, [sp, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <_strtol_l.isra.0+0xe0>
 8004dac:	b007      	add	sp, #28
 8004dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	d000      	beq.n	8004db6 <_strtol_l.isra.0+0xd6>
 8004db4:	4240      	negs	r0, r0
 8004db6:	9a02      	ldr	r2, [sp, #8]
 8004db8:	2a00      	cmp	r2, #0
 8004dba:	d0f7      	beq.n	8004dac <_strtol_l.isra.0+0xcc>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <_strtol_l.isra.0+0xe4>
 8004dc0:	1e6b      	subs	r3, r5, #1
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	9b02      	ldr	r3, [sp, #8]
 8004dc6:	9a01      	ldr	r2, [sp, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e7ef      	b.n	8004dac <_strtol_l.isra.0+0xcc>
 8004dcc:	2430      	movs	r4, #48	; 0x30
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	d1aa      	bne.n	8004d28 <_strtol_l.isra.0+0x48>
 8004dd2:	2708      	movs	r7, #8
 8004dd4:	e7a8      	b.n	8004d28 <_strtol_l.isra.0+0x48>
 8004dd6:	2c30      	cmp	r4, #48	; 0x30
 8004dd8:	d09e      	beq.n	8004d18 <_strtol_l.isra.0+0x38>
 8004dda:	270a      	movs	r7, #10
 8004ddc:	e7a4      	b.n	8004d28 <_strtol_l.isra.0+0x48>
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	7fffffff 	.word	0x7fffffff

08004de4 <strtol>:
 8004de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004de6:	0013      	movs	r3, r2
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <strtol+0x20>)
 8004dea:	0005      	movs	r5, r0
 8004dec:	6810      	ldr	r0, [r2, #0]
 8004dee:	6a04      	ldr	r4, [r0, #32]
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d100      	bne.n	8004df6 <strtol+0x12>
 8004df4:	4c04      	ldr	r4, [pc, #16]	; (8004e08 <strtol+0x24>)
 8004df6:	000a      	movs	r2, r1
 8004df8:	9400      	str	r4, [sp, #0]
 8004dfa:	0029      	movs	r1, r5
 8004dfc:	f7ff ff70 	bl	8004ce0 <_strtol_l.isra.0>
 8004e00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	20000070 	.word	0x20000070

08004e0c <__locale_ctype_ptr_l>:
 8004e0c:	30ec      	adds	r0, #236	; 0xec
 8004e0e:	6800      	ldr	r0, [r0, #0]
 8004e10:	4770      	bx	lr

08004e12 <__ascii_mbtowc>:
 8004e12:	b082      	sub	sp, #8
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d100      	bne.n	8004e1a <__ascii_mbtowc+0x8>
 8004e18:	a901      	add	r1, sp, #4
 8004e1a:	1e10      	subs	r0, r2, #0
 8004e1c:	d006      	beq.n	8004e2c <__ascii_mbtowc+0x1a>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <__ascii_mbtowc+0x1e>
 8004e22:	7813      	ldrb	r3, [r2, #0]
 8004e24:	600b      	str	r3, [r1, #0]
 8004e26:	7810      	ldrb	r0, [r2, #0]
 8004e28:	1e43      	subs	r3, r0, #1
 8004e2a:	4198      	sbcs	r0, r3
 8004e2c:	b002      	add	sp, #8
 8004e2e:	4770      	bx	lr
 8004e30:	2002      	movs	r0, #2
 8004e32:	4240      	negs	r0, r0
 8004e34:	e7fa      	b.n	8004e2c <__ascii_mbtowc+0x1a>
	...

08004e38 <__ssputs_r>:
 8004e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3a:	688e      	ldr	r6, [r1, #8]
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	0007      	movs	r7, r0
 8004e40:	000c      	movs	r4, r1
 8004e42:	9203      	str	r2, [sp, #12]
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	429e      	cmp	r6, r3
 8004e48:	d83c      	bhi.n	8004ec4 <__ssputs_r+0x8c>
 8004e4a:	2390      	movs	r3, #144	; 0x90
 8004e4c:	898a      	ldrh	r2, [r1, #12]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	421a      	tst	r2, r3
 8004e52:	d034      	beq.n	8004ebe <__ssputs_r+0x86>
 8004e54:	2503      	movs	r5, #3
 8004e56:	6909      	ldr	r1, [r1, #16]
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	1a5b      	subs	r3, r3, r1
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	9802      	ldr	r0, [sp, #8]
 8004e62:	435d      	muls	r5, r3
 8004e64:	0feb      	lsrs	r3, r5, #31
 8004e66:	195d      	adds	r5, r3, r5
 8004e68:	9b01      	ldr	r3, [sp, #4]
 8004e6a:	106d      	asrs	r5, r5, #1
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	181b      	adds	r3, r3, r0
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	d900      	bls.n	8004e76 <__ssputs_r+0x3e>
 8004e74:	001d      	movs	r5, r3
 8004e76:	0553      	lsls	r3, r2, #21
 8004e78:	d532      	bpl.n	8004ee0 <__ssputs_r+0xa8>
 8004e7a:	0029      	movs	r1, r5
 8004e7c:	0038      	movs	r0, r7
 8004e7e:	f000 fb25 	bl	80054cc <_malloc_r>
 8004e82:	1e06      	subs	r6, r0, #0
 8004e84:	d109      	bne.n	8004e9a <__ssputs_r+0x62>
 8004e86:	230c      	movs	r3, #12
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	89a2      	ldrh	r2, [r4, #12]
 8004e90:	4240      	negs	r0, r0
 8004e92:	4313      	orrs	r3, r2
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	b005      	add	sp, #20
 8004e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9a:	9a02      	ldr	r2, [sp, #8]
 8004e9c:	6921      	ldr	r1, [r4, #16]
 8004e9e:	f7ff feed 	bl	8004c7c <memcpy>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <__ssputs_r+0xc0>)
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	9b02      	ldr	r3, [sp, #8]
 8004eb0:	6126      	str	r6, [r4, #16]
 8004eb2:	18f6      	adds	r6, r6, r3
 8004eb4:	6026      	str	r6, [r4, #0]
 8004eb6:	6165      	str	r5, [r4, #20]
 8004eb8:	9e01      	ldr	r6, [sp, #4]
 8004eba:	1aed      	subs	r5, r5, r3
 8004ebc:	60a5      	str	r5, [r4, #8]
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	429e      	cmp	r6, r3
 8004ec2:	d900      	bls.n	8004ec6 <__ssputs_r+0x8e>
 8004ec4:	9e01      	ldr	r6, [sp, #4]
 8004ec6:	0032      	movs	r2, r6
 8004ec8:	9903      	ldr	r1, [sp, #12]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	f000 faa1 	bl	8005412 <memmove>
 8004ed0:	68a3      	ldr	r3, [r4, #8]
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	1b9b      	subs	r3, r3, r6
 8004ed6:	60a3      	str	r3, [r4, #8]
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	199e      	adds	r6, r3, r6
 8004edc:	6026      	str	r6, [r4, #0]
 8004ede:	e7da      	b.n	8004e96 <__ssputs_r+0x5e>
 8004ee0:	002a      	movs	r2, r5
 8004ee2:	0038      	movs	r0, r7
 8004ee4:	f000 fb50 	bl	8005588 <_realloc_r>
 8004ee8:	1e06      	subs	r6, r0, #0
 8004eea:	d1e0      	bne.n	8004eae <__ssputs_r+0x76>
 8004eec:	6921      	ldr	r1, [r4, #16]
 8004eee:	0038      	movs	r0, r7
 8004ef0:	f000 faa2 	bl	8005438 <_free_r>
 8004ef4:	e7c7      	b.n	8004e86 <__ssputs_r+0x4e>
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	fffffb7f 	.word	0xfffffb7f

08004efc <_svfiprintf_r>:
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	b0a1      	sub	sp, #132	; 0x84
 8004f00:	9003      	str	r0, [sp, #12]
 8004f02:	001d      	movs	r5, r3
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	000f      	movs	r7, r1
 8004f08:	0016      	movs	r6, r2
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	d511      	bpl.n	8004f32 <_svfiprintf_r+0x36>
 8004f0e:	690b      	ldr	r3, [r1, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10e      	bne.n	8004f32 <_svfiprintf_r+0x36>
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	f000 fad9 	bl	80054cc <_malloc_r>
 8004f1a:	6038      	str	r0, [r7, #0]
 8004f1c:	6138      	str	r0, [r7, #16]
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d105      	bne.n	8004f2e <_svfiprintf_r+0x32>
 8004f22:	230c      	movs	r3, #12
 8004f24:	9a03      	ldr	r2, [sp, #12]
 8004f26:	3801      	subs	r0, #1
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	b021      	add	sp, #132	; 0x84
 8004f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	2300      	movs	r3, #0
 8004f34:	ac08      	add	r4, sp, #32
 8004f36:	6163      	str	r3, [r4, #20]
 8004f38:	3320      	adds	r3, #32
 8004f3a:	7663      	strb	r3, [r4, #25]
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	76a3      	strb	r3, [r4, #26]
 8004f40:	9507      	str	r5, [sp, #28]
 8004f42:	0035      	movs	r5, r6
 8004f44:	782b      	ldrb	r3, [r5, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <_svfiprintf_r+0x52>
 8004f4a:	2b25      	cmp	r3, #37	; 0x25
 8004f4c:	d146      	bne.n	8004fdc <_svfiprintf_r+0xe0>
 8004f4e:	1bab      	subs	r3, r5, r6
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	d00c      	beq.n	8004f6e <_svfiprintf_r+0x72>
 8004f54:	0032      	movs	r2, r6
 8004f56:	0039      	movs	r1, r7
 8004f58:	9803      	ldr	r0, [sp, #12]
 8004f5a:	f7ff ff6d 	bl	8004e38 <__ssputs_r>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d100      	bne.n	8004f64 <_svfiprintf_r+0x68>
 8004f62:	e0ae      	b.n	80050c2 <_svfiprintf_r+0x1c6>
 8004f64:	6962      	ldr	r2, [r4, #20]
 8004f66:	9b05      	ldr	r3, [sp, #20]
 8004f68:	4694      	mov	ip, r2
 8004f6a:	4463      	add	r3, ip
 8004f6c:	6163      	str	r3, [r4, #20]
 8004f6e:	782b      	ldrb	r3, [r5, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d100      	bne.n	8004f76 <_svfiprintf_r+0x7a>
 8004f74:	e0a5      	b.n	80050c2 <_svfiprintf_r+0x1c6>
 8004f76:	2201      	movs	r2, #1
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4252      	negs	r2, r2
 8004f7c:	6062      	str	r2, [r4, #4]
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	3254      	adds	r2, #84	; 0x54
 8004f82:	1852      	adds	r2, r2, r1
 8004f84:	1c6e      	adds	r6, r5, #1
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	60e3      	str	r3, [r4, #12]
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	7013      	strb	r3, [r2, #0]
 8004f8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f90:	7831      	ldrb	r1, [r6, #0]
 8004f92:	2205      	movs	r2, #5
 8004f94:	4853      	ldr	r0, [pc, #332]	; (80050e4 <_svfiprintf_r+0x1e8>)
 8004f96:	f000 fa31 	bl	80053fc <memchr>
 8004f9a:	1c75      	adds	r5, r6, #1
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d11f      	bne.n	8004fe0 <_svfiprintf_r+0xe4>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	06d3      	lsls	r3, r2, #27
 8004fa4:	d504      	bpl.n	8004fb0 <_svfiprintf_r+0xb4>
 8004fa6:	2353      	movs	r3, #83	; 0x53
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	185b      	adds	r3, r3, r1
 8004fac:	2120      	movs	r1, #32
 8004fae:	7019      	strb	r1, [r3, #0]
 8004fb0:	0713      	lsls	r3, r2, #28
 8004fb2:	d504      	bpl.n	8004fbe <_svfiprintf_r+0xc2>
 8004fb4:	2353      	movs	r3, #83	; 0x53
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	185b      	adds	r3, r3, r1
 8004fba:	212b      	movs	r1, #43	; 0x2b
 8004fbc:	7019      	strb	r1, [r3, #0]
 8004fbe:	7833      	ldrb	r3, [r6, #0]
 8004fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc2:	d016      	beq.n	8004ff2 <_svfiprintf_r+0xf6>
 8004fc4:	0035      	movs	r5, r6
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	200a      	movs	r0, #10
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	782a      	ldrb	r2, [r5, #0]
 8004fce:	1c6e      	adds	r6, r5, #1
 8004fd0:	3a30      	subs	r2, #48	; 0x30
 8004fd2:	2a09      	cmp	r2, #9
 8004fd4:	d94e      	bls.n	8005074 <_svfiprintf_r+0x178>
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	d018      	beq.n	800500c <_svfiprintf_r+0x110>
 8004fda:	e010      	b.n	8004ffe <_svfiprintf_r+0x102>
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7b1      	b.n	8004f44 <_svfiprintf_r+0x48>
 8004fe0:	4b40      	ldr	r3, [pc, #256]	; (80050e4 <_svfiprintf_r+0x1e8>)
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	1ac0      	subs	r0, r0, r3
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4083      	lsls	r3, r0
 8004fea:	4313      	orrs	r3, r2
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	002e      	movs	r6, r5
 8004ff0:	e7ce      	b.n	8004f90 <_svfiprintf_r+0x94>
 8004ff2:	9b07      	ldr	r3, [sp, #28]
 8004ff4:	1d19      	adds	r1, r3, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	9107      	str	r1, [sp, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db01      	blt.n	8005002 <_svfiprintf_r+0x106>
 8004ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005000:	e004      	b.n	800500c <_svfiprintf_r+0x110>
 8005002:	425b      	negs	r3, r3
 8005004:	60e3      	str	r3, [r4, #12]
 8005006:	2302      	movs	r3, #2
 8005008:	4313      	orrs	r3, r2
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	782b      	ldrb	r3, [r5, #0]
 800500e:	2b2e      	cmp	r3, #46	; 0x2e
 8005010:	d10a      	bne.n	8005028 <_svfiprintf_r+0x12c>
 8005012:	786b      	ldrb	r3, [r5, #1]
 8005014:	2b2a      	cmp	r3, #42	; 0x2a
 8005016:	d135      	bne.n	8005084 <_svfiprintf_r+0x188>
 8005018:	9b07      	ldr	r3, [sp, #28]
 800501a:	3502      	adds	r5, #2
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	9207      	str	r2, [sp, #28]
 8005022:	2b00      	cmp	r3, #0
 8005024:	db2b      	blt.n	800507e <_svfiprintf_r+0x182>
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	4e2f      	ldr	r6, [pc, #188]	; (80050e8 <_svfiprintf_r+0x1ec>)
 800502a:	7829      	ldrb	r1, [r5, #0]
 800502c:	2203      	movs	r2, #3
 800502e:	0030      	movs	r0, r6
 8005030:	f000 f9e4 	bl	80053fc <memchr>
 8005034:	2800      	cmp	r0, #0
 8005036:	d006      	beq.n	8005046 <_svfiprintf_r+0x14a>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	1b80      	subs	r0, r0, r6
 800503c:	4083      	lsls	r3, r0
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	3501      	adds	r5, #1
 8005042:	4313      	orrs	r3, r2
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	7829      	ldrb	r1, [r5, #0]
 8005048:	2206      	movs	r2, #6
 800504a:	4828      	ldr	r0, [pc, #160]	; (80050ec <_svfiprintf_r+0x1f0>)
 800504c:	1c6e      	adds	r6, r5, #1
 800504e:	7621      	strb	r1, [r4, #24]
 8005050:	f000 f9d4 	bl	80053fc <memchr>
 8005054:	2800      	cmp	r0, #0
 8005056:	d03c      	beq.n	80050d2 <_svfiprintf_r+0x1d6>
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <_svfiprintf_r+0x1f4>)
 800505a:	2b00      	cmp	r3, #0
 800505c:	d125      	bne.n	80050aa <_svfiprintf_r+0x1ae>
 800505e:	2207      	movs	r2, #7
 8005060:	9b07      	ldr	r3, [sp, #28]
 8005062:	3307      	adds	r3, #7
 8005064:	4393      	bics	r3, r2
 8005066:	3308      	adds	r3, #8
 8005068:	9307      	str	r3, [sp, #28]
 800506a:	6963      	ldr	r3, [r4, #20]
 800506c:	9a04      	ldr	r2, [sp, #16]
 800506e:	189b      	adds	r3, r3, r2
 8005070:	6163      	str	r3, [r4, #20]
 8005072:	e766      	b.n	8004f42 <_svfiprintf_r+0x46>
 8005074:	4343      	muls	r3, r0
 8005076:	2101      	movs	r1, #1
 8005078:	189b      	adds	r3, r3, r2
 800507a:	0035      	movs	r5, r6
 800507c:	e7a6      	b.n	8004fcc <_svfiprintf_r+0xd0>
 800507e:	2301      	movs	r3, #1
 8005080:	425b      	negs	r3, r3
 8005082:	e7d0      	b.n	8005026 <_svfiprintf_r+0x12a>
 8005084:	2300      	movs	r3, #0
 8005086:	200a      	movs	r0, #10
 8005088:	001a      	movs	r2, r3
 800508a:	3501      	adds	r5, #1
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	7829      	ldrb	r1, [r5, #0]
 8005090:	1c6e      	adds	r6, r5, #1
 8005092:	3930      	subs	r1, #48	; 0x30
 8005094:	2909      	cmp	r1, #9
 8005096:	d903      	bls.n	80050a0 <_svfiprintf_r+0x1a4>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c5      	beq.n	8005028 <_svfiprintf_r+0x12c>
 800509c:	9209      	str	r2, [sp, #36]	; 0x24
 800509e:	e7c3      	b.n	8005028 <_svfiprintf_r+0x12c>
 80050a0:	4342      	muls	r2, r0
 80050a2:	2301      	movs	r3, #1
 80050a4:	1852      	adds	r2, r2, r1
 80050a6:	0035      	movs	r5, r6
 80050a8:	e7f1      	b.n	800508e <_svfiprintf_r+0x192>
 80050aa:	ab07      	add	r3, sp, #28
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	003a      	movs	r2, r7
 80050b0:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <_svfiprintf_r+0x1f8>)
 80050b2:	0021      	movs	r1, r4
 80050b4:	9803      	ldr	r0, [sp, #12]
 80050b6:	e000      	b.n	80050ba <_svfiprintf_r+0x1be>
 80050b8:	bf00      	nop
 80050ba:	9004      	str	r0, [sp, #16]
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	3301      	adds	r3, #1
 80050c0:	d1d3      	bne.n	800506a <_svfiprintf_r+0x16e>
 80050c2:	89bb      	ldrh	r3, [r7, #12]
 80050c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80050c6:	065b      	lsls	r3, r3, #25
 80050c8:	d400      	bmi.n	80050cc <_svfiprintf_r+0x1d0>
 80050ca:	e72e      	b.n	8004f2a <_svfiprintf_r+0x2e>
 80050cc:	2001      	movs	r0, #1
 80050ce:	4240      	negs	r0, r0
 80050d0:	e72b      	b.n	8004f2a <_svfiprintf_r+0x2e>
 80050d2:	ab07      	add	r3, sp, #28
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	003a      	movs	r2, r7
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <_svfiprintf_r+0x1f8>)
 80050da:	0021      	movs	r1, r4
 80050dc:	9803      	ldr	r0, [sp, #12]
 80050de:	f000 f879 	bl	80051d4 <_printf_i>
 80050e2:	e7ea      	b.n	80050ba <_svfiprintf_r+0x1be>
 80050e4:	0800570e 	.word	0x0800570e
 80050e8:	08005714 	.word	0x08005714
 80050ec:	08005718 	.word	0x08005718
 80050f0:	00000000 	.word	0x00000000
 80050f4:	08004e39 	.word	0x08004e39

080050f8 <_printf_common>:
 80050f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fa:	0015      	movs	r5, r2
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	688a      	ldr	r2, [r1, #8]
 8005100:	690b      	ldr	r3, [r1, #16]
 8005102:	9000      	str	r0, [sp, #0]
 8005104:	000c      	movs	r4, r1
 8005106:	4293      	cmp	r3, r2
 8005108:	da00      	bge.n	800510c <_printf_common+0x14>
 800510a:	0013      	movs	r3, r2
 800510c:	0022      	movs	r2, r4
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	3243      	adds	r2, #67	; 0x43
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	2a00      	cmp	r2, #0
 8005116:	d001      	beq.n	800511c <_printf_common+0x24>
 8005118:	3301      	adds	r3, #1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	069b      	lsls	r3, r3, #26
 8005120:	d502      	bpl.n	8005128 <_printf_common+0x30>
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	3302      	adds	r3, #2
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	2706      	movs	r7, #6
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	401f      	ands	r7, r3
 800512e:	d027      	beq.n	8005180 <_printf_common+0x88>
 8005130:	0023      	movs	r3, r4
 8005132:	3343      	adds	r3, #67	; 0x43
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	4193      	sbcs	r3, r2
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	0692      	lsls	r2, r2, #26
 800513e:	d430      	bmi.n	80051a2 <_printf_common+0xaa>
 8005140:	0022      	movs	r2, r4
 8005142:	9901      	ldr	r1, [sp, #4]
 8005144:	3243      	adds	r2, #67	; 0x43
 8005146:	9800      	ldr	r0, [sp, #0]
 8005148:	9e08      	ldr	r6, [sp, #32]
 800514a:	47b0      	blx	r6
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d025      	beq.n	800519c <_printf_common+0xa4>
 8005150:	2306      	movs	r3, #6
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	682a      	ldr	r2, [r5, #0]
 8005156:	68e1      	ldr	r1, [r4, #12]
 8005158:	4003      	ands	r3, r0
 800515a:	2500      	movs	r5, #0
 800515c:	2b04      	cmp	r3, #4
 800515e:	d103      	bne.n	8005168 <_printf_common+0x70>
 8005160:	1a8d      	subs	r5, r1, r2
 8005162:	43eb      	mvns	r3, r5
 8005164:	17db      	asrs	r3, r3, #31
 8005166:	401d      	ands	r5, r3
 8005168:	68a3      	ldr	r3, [r4, #8]
 800516a:	6922      	ldr	r2, [r4, #16]
 800516c:	4293      	cmp	r3, r2
 800516e:	dd01      	ble.n	8005174 <_printf_common+0x7c>
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	18ed      	adds	r5, r5, r3
 8005174:	2700      	movs	r7, #0
 8005176:	42bd      	cmp	r5, r7
 8005178:	d120      	bne.n	80051bc <_printf_common+0xc4>
 800517a:	2000      	movs	r0, #0
 800517c:	e010      	b.n	80051a0 <_printf_common+0xa8>
 800517e:	3701      	adds	r7, #1
 8005180:	68e3      	ldr	r3, [r4, #12]
 8005182:	682a      	ldr	r2, [r5, #0]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	42bb      	cmp	r3, r7
 8005188:	ddd2      	ble.n	8005130 <_printf_common+0x38>
 800518a:	0022      	movs	r2, r4
 800518c:	2301      	movs	r3, #1
 800518e:	3219      	adds	r2, #25
 8005190:	9901      	ldr	r1, [sp, #4]
 8005192:	9800      	ldr	r0, [sp, #0]
 8005194:	9e08      	ldr	r6, [sp, #32]
 8005196:	47b0      	blx	r6
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d1f0      	bne.n	800517e <_printf_common+0x86>
 800519c:	2001      	movs	r0, #1
 800519e:	4240      	negs	r0, r0
 80051a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051a2:	2030      	movs	r0, #48	; 0x30
 80051a4:	18e1      	adds	r1, r4, r3
 80051a6:	3143      	adds	r1, #67	; 0x43
 80051a8:	7008      	strb	r0, [r1, #0]
 80051aa:	0021      	movs	r1, r4
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	3145      	adds	r1, #69	; 0x45
 80051b0:	7809      	ldrb	r1, [r1, #0]
 80051b2:	18a2      	adds	r2, r4, r2
 80051b4:	3243      	adds	r2, #67	; 0x43
 80051b6:	3302      	adds	r3, #2
 80051b8:	7011      	strb	r1, [r2, #0]
 80051ba:	e7c1      	b.n	8005140 <_printf_common+0x48>
 80051bc:	0022      	movs	r2, r4
 80051be:	2301      	movs	r3, #1
 80051c0:	321a      	adds	r2, #26
 80051c2:	9901      	ldr	r1, [sp, #4]
 80051c4:	9800      	ldr	r0, [sp, #0]
 80051c6:	9e08      	ldr	r6, [sp, #32]
 80051c8:	47b0      	blx	r6
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d0e6      	beq.n	800519c <_printf_common+0xa4>
 80051ce:	3701      	adds	r7, #1
 80051d0:	e7d1      	b.n	8005176 <_printf_common+0x7e>
	...

080051d4 <_printf_i>:
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	9204      	str	r2, [sp, #16]
 80051da:	000a      	movs	r2, r1
 80051dc:	3243      	adds	r2, #67	; 0x43
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	9003      	str	r0, [sp, #12]
 80051e2:	9202      	str	r2, [sp, #8]
 80051e4:	7e0a      	ldrb	r2, [r1, #24]
 80051e6:	000c      	movs	r4, r1
 80051e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ea:	2a6e      	cmp	r2, #110	; 0x6e
 80051ec:	d100      	bne.n	80051f0 <_printf_i+0x1c>
 80051ee:	e086      	b.n	80052fe <_printf_i+0x12a>
 80051f0:	d81f      	bhi.n	8005232 <_printf_i+0x5e>
 80051f2:	2a63      	cmp	r2, #99	; 0x63
 80051f4:	d033      	beq.n	800525e <_printf_i+0x8a>
 80051f6:	d808      	bhi.n	800520a <_printf_i+0x36>
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	d100      	bne.n	80051fe <_printf_i+0x2a>
 80051fc:	e08c      	b.n	8005318 <_printf_i+0x144>
 80051fe:	2a58      	cmp	r2, #88	; 0x58
 8005200:	d04d      	beq.n	800529e <_printf_i+0xca>
 8005202:	0025      	movs	r5, r4
 8005204:	3542      	adds	r5, #66	; 0x42
 8005206:	702a      	strb	r2, [r5, #0]
 8005208:	e030      	b.n	800526c <_printf_i+0x98>
 800520a:	2a64      	cmp	r2, #100	; 0x64
 800520c:	d001      	beq.n	8005212 <_printf_i+0x3e>
 800520e:	2a69      	cmp	r2, #105	; 0x69
 8005210:	d1f7      	bne.n	8005202 <_printf_i+0x2e>
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1d0a      	adds	r2, r1, #4
 8005218:	0628      	lsls	r0, r5, #24
 800521a:	d529      	bpl.n	8005270 <_printf_i+0x9c>
 800521c:	6808      	ldr	r0, [r1, #0]
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	2800      	cmp	r0, #0
 8005222:	da03      	bge.n	800522c <_printf_i+0x58>
 8005224:	232d      	movs	r3, #45	; 0x2d
 8005226:	9a02      	ldr	r2, [sp, #8]
 8005228:	4240      	negs	r0, r0
 800522a:	7013      	strb	r3, [r2, #0]
 800522c:	4e6b      	ldr	r6, [pc, #428]	; (80053dc <_printf_i+0x208>)
 800522e:	270a      	movs	r7, #10
 8005230:	e04f      	b.n	80052d2 <_printf_i+0xfe>
 8005232:	2a73      	cmp	r2, #115	; 0x73
 8005234:	d074      	beq.n	8005320 <_printf_i+0x14c>
 8005236:	d808      	bhi.n	800524a <_printf_i+0x76>
 8005238:	2a6f      	cmp	r2, #111	; 0x6f
 800523a:	d01f      	beq.n	800527c <_printf_i+0xa8>
 800523c:	2a70      	cmp	r2, #112	; 0x70
 800523e:	d1e0      	bne.n	8005202 <_printf_i+0x2e>
 8005240:	2220      	movs	r2, #32
 8005242:	6809      	ldr	r1, [r1, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	e003      	b.n	8005252 <_printf_i+0x7e>
 800524a:	2a75      	cmp	r2, #117	; 0x75
 800524c:	d016      	beq.n	800527c <_printf_i+0xa8>
 800524e:	2a78      	cmp	r2, #120	; 0x78
 8005250:	d1d7      	bne.n	8005202 <_printf_i+0x2e>
 8005252:	0022      	movs	r2, r4
 8005254:	2178      	movs	r1, #120	; 0x78
 8005256:	3245      	adds	r2, #69	; 0x45
 8005258:	7011      	strb	r1, [r2, #0]
 800525a:	4e61      	ldr	r6, [pc, #388]	; (80053e0 <_printf_i+0x20c>)
 800525c:	e022      	b.n	80052a4 <_printf_i+0xd0>
 800525e:	0025      	movs	r5, r4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	3542      	adds	r5, #66	; 0x42
 8005264:	1d11      	adds	r1, r2, #4
 8005266:	6019      	str	r1, [r3, #0]
 8005268:	6813      	ldr	r3, [r2, #0]
 800526a:	702b      	strb	r3, [r5, #0]
 800526c:	2301      	movs	r3, #1
 800526e:	e065      	b.n	800533c <_printf_i+0x168>
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	0669      	lsls	r1, r5, #25
 8005276:	d5d3      	bpl.n	8005220 <_printf_i+0x4c>
 8005278:	b200      	sxth	r0, r0
 800527a:	e7d1      	b.n	8005220 <_printf_i+0x4c>
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	1d08      	adds	r0, r1, #4
 8005282:	6018      	str	r0, [r3, #0]
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	062e      	lsls	r6, r5, #24
 8005288:	d505      	bpl.n	8005296 <_printf_i+0xc2>
 800528a:	4e54      	ldr	r6, [pc, #336]	; (80053dc <_printf_i+0x208>)
 800528c:	2708      	movs	r7, #8
 800528e:	2a6f      	cmp	r2, #111	; 0x6f
 8005290:	d01b      	beq.n	80052ca <_printf_i+0xf6>
 8005292:	270a      	movs	r7, #10
 8005294:	e019      	b.n	80052ca <_printf_i+0xf6>
 8005296:	066d      	lsls	r5, r5, #25
 8005298:	d5f7      	bpl.n	800528a <_printf_i+0xb6>
 800529a:	b280      	uxth	r0, r0
 800529c:	e7f5      	b.n	800528a <_printf_i+0xb6>
 800529e:	3145      	adds	r1, #69	; 0x45
 80052a0:	4e4e      	ldr	r6, [pc, #312]	; (80053dc <_printf_i+0x208>)
 80052a2:	700a      	strb	r2, [r1, #0]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	6822      	ldr	r2, [r4, #0]
 80052a8:	1d01      	adds	r1, r0, #4
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	6019      	str	r1, [r3, #0]
 80052ae:	0615      	lsls	r5, r2, #24
 80052b0:	d521      	bpl.n	80052f6 <_printf_i+0x122>
 80052b2:	07d3      	lsls	r3, r2, #31
 80052b4:	d502      	bpl.n	80052bc <_printf_i+0xe8>
 80052b6:	2320      	movs	r3, #32
 80052b8:	431a      	orrs	r2, r3
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	2710      	movs	r7, #16
 80052be:	2800      	cmp	r0, #0
 80052c0:	d103      	bne.n	80052ca <_printf_i+0xf6>
 80052c2:	2320      	movs	r3, #32
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	439a      	bics	r2, r3
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	0023      	movs	r3, r4
 80052cc:	2200      	movs	r2, #0
 80052ce:	3343      	adds	r3, #67	; 0x43
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	60a3      	str	r3, [r4, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	db58      	blt.n	800538c <_printf_i+0x1b8>
 80052da:	2204      	movs	r2, #4
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	4391      	bics	r1, r2
 80052e0:	6021      	str	r1, [r4, #0]
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d154      	bne.n	8005390 <_printf_i+0x1bc>
 80052e6:	9d02      	ldr	r5, [sp, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d05a      	beq.n	80053a2 <_printf_i+0x1ce>
 80052ec:	0025      	movs	r5, r4
 80052ee:	7833      	ldrb	r3, [r6, #0]
 80052f0:	3542      	adds	r5, #66	; 0x42
 80052f2:	702b      	strb	r3, [r5, #0]
 80052f4:	e055      	b.n	80053a2 <_printf_i+0x1ce>
 80052f6:	0655      	lsls	r5, r2, #25
 80052f8:	d5db      	bpl.n	80052b2 <_printf_i+0xde>
 80052fa:	b280      	uxth	r0, r0
 80052fc:	e7d9      	b.n	80052b2 <_printf_i+0xde>
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	680d      	ldr	r5, [r1, #0]
 8005302:	1d10      	adds	r0, r2, #4
 8005304:	6949      	ldr	r1, [r1, #20]
 8005306:	6018      	str	r0, [r3, #0]
 8005308:	6813      	ldr	r3, [r2, #0]
 800530a:	062e      	lsls	r6, r5, #24
 800530c:	d501      	bpl.n	8005312 <_printf_i+0x13e>
 800530e:	6019      	str	r1, [r3, #0]
 8005310:	e002      	b.n	8005318 <_printf_i+0x144>
 8005312:	066d      	lsls	r5, r5, #25
 8005314:	d5fb      	bpl.n	800530e <_printf_i+0x13a>
 8005316:	8019      	strh	r1, [r3, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	9d02      	ldr	r5, [sp, #8]
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	e04f      	b.n	80053c0 <_printf_i+0x1ec>
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	1d11      	adds	r1, r2, #4
 8005324:	6019      	str	r1, [r3, #0]
 8005326:	6815      	ldr	r5, [r2, #0]
 8005328:	2100      	movs	r1, #0
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	0028      	movs	r0, r5
 800532e:	f000 f865 	bl	80053fc <memchr>
 8005332:	2800      	cmp	r0, #0
 8005334:	d001      	beq.n	800533a <_printf_i+0x166>
 8005336:	1b40      	subs	r0, r0, r5
 8005338:	6060      	str	r0, [r4, #4]
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	2300      	movs	r3, #0
 8005340:	9a02      	ldr	r2, [sp, #8]
 8005342:	7013      	strb	r3, [r2, #0]
 8005344:	e03c      	b.n	80053c0 <_printf_i+0x1ec>
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	002a      	movs	r2, r5
 800534a:	9904      	ldr	r1, [sp, #16]
 800534c:	9803      	ldr	r0, [sp, #12]
 800534e:	9d05      	ldr	r5, [sp, #20]
 8005350:	47a8      	blx	r5
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d03e      	beq.n	80053d4 <_printf_i+0x200>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d415      	bmi.n	8005388 <_printf_i+0x1b4>
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	68e0      	ldr	r0, [r4, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	da39      	bge.n	80053d8 <_printf_i+0x204>
 8005364:	0018      	movs	r0, r3
 8005366:	e037      	b.n	80053d8 <_printf_i+0x204>
 8005368:	0022      	movs	r2, r4
 800536a:	2301      	movs	r3, #1
 800536c:	3219      	adds	r2, #25
 800536e:	9904      	ldr	r1, [sp, #16]
 8005370:	9803      	ldr	r0, [sp, #12]
 8005372:	9e05      	ldr	r6, [sp, #20]
 8005374:	47b0      	blx	r6
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	d02c      	beq.n	80053d4 <_printf_i+0x200>
 800537a:	3501      	adds	r5, #1
 800537c:	68e3      	ldr	r3, [r4, #12]
 800537e:	9a07      	ldr	r2, [sp, #28]
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	42ab      	cmp	r3, r5
 8005384:	dcf0      	bgt.n	8005368 <_printf_i+0x194>
 8005386:	e7e9      	b.n	800535c <_printf_i+0x188>
 8005388:	2500      	movs	r5, #0
 800538a:	e7f7      	b.n	800537c <_printf_i+0x1a8>
 800538c:	2800      	cmp	r0, #0
 800538e:	d0ad      	beq.n	80052ec <_printf_i+0x118>
 8005390:	9d02      	ldr	r5, [sp, #8]
 8005392:	0039      	movs	r1, r7
 8005394:	f7fa ff46 	bl	8000224 <__aeabi_uidivmod>
 8005398:	5c73      	ldrb	r3, [r6, r1]
 800539a:	3d01      	subs	r5, #1
 800539c:	702b      	strb	r3, [r5, #0]
 800539e:	2800      	cmp	r0, #0
 80053a0:	d1f7      	bne.n	8005392 <_printf_i+0x1be>
 80053a2:	2f08      	cmp	r7, #8
 80053a4:	d109      	bne.n	80053ba <_printf_i+0x1e6>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	07db      	lsls	r3, r3, #31
 80053aa:	d506      	bpl.n	80053ba <_printf_i+0x1e6>
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	6922      	ldr	r2, [r4, #16]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	dc02      	bgt.n	80053ba <_printf_i+0x1e6>
 80053b4:	2330      	movs	r3, #48	; 0x30
 80053b6:	3d01      	subs	r5, #1
 80053b8:	702b      	strb	r3, [r5, #0]
 80053ba:	9b02      	ldr	r3, [sp, #8]
 80053bc:	1b5b      	subs	r3, r3, r5
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	9b05      	ldr	r3, [sp, #20]
 80053c2:	aa07      	add	r2, sp, #28
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	0021      	movs	r1, r4
 80053c8:	9b04      	ldr	r3, [sp, #16]
 80053ca:	9803      	ldr	r0, [sp, #12]
 80053cc:	f7ff fe94 	bl	80050f8 <_printf_common>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d1b8      	bne.n	8005346 <_printf_i+0x172>
 80053d4:	2001      	movs	r0, #1
 80053d6:	4240      	negs	r0, r0
 80053d8:	b009      	add	sp, #36	; 0x24
 80053da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053dc:	0800571f 	.word	0x0800571f
 80053e0:	08005730 	.word	0x08005730

080053e4 <__ascii_wctomb>:
 80053e4:	1e0b      	subs	r3, r1, #0
 80053e6:	d004      	beq.n	80053f2 <__ascii_wctomb+0xe>
 80053e8:	2aff      	cmp	r2, #255	; 0xff
 80053ea:	d904      	bls.n	80053f6 <__ascii_wctomb+0x12>
 80053ec:	238a      	movs	r3, #138	; 0x8a
 80053ee:	6003      	str	r3, [r0, #0]
 80053f0:	3b8b      	subs	r3, #139	; 0x8b
 80053f2:	0018      	movs	r0, r3
 80053f4:	4770      	bx	lr
 80053f6:	700a      	strb	r2, [r1, #0]
 80053f8:	2301      	movs	r3, #1
 80053fa:	e7fa      	b.n	80053f2 <__ascii_wctomb+0xe>

080053fc <memchr>:
 80053fc:	b2c9      	uxtb	r1, r1
 80053fe:	1882      	adds	r2, r0, r2
 8005400:	4290      	cmp	r0, r2
 8005402:	d101      	bne.n	8005408 <memchr+0xc>
 8005404:	2000      	movs	r0, #0
 8005406:	4770      	bx	lr
 8005408:	7803      	ldrb	r3, [r0, #0]
 800540a:	428b      	cmp	r3, r1
 800540c:	d0fb      	beq.n	8005406 <memchr+0xa>
 800540e:	3001      	adds	r0, #1
 8005410:	e7f6      	b.n	8005400 <memchr+0x4>

08005412 <memmove>:
 8005412:	b510      	push	{r4, lr}
 8005414:	4288      	cmp	r0, r1
 8005416:	d902      	bls.n	800541e <memmove+0xc>
 8005418:	188b      	adds	r3, r1, r2
 800541a:	4298      	cmp	r0, r3
 800541c:	d303      	bcc.n	8005426 <memmove+0x14>
 800541e:	2300      	movs	r3, #0
 8005420:	e007      	b.n	8005432 <memmove+0x20>
 8005422:	5c8b      	ldrb	r3, [r1, r2]
 8005424:	5483      	strb	r3, [r0, r2]
 8005426:	3a01      	subs	r2, #1
 8005428:	d2fb      	bcs.n	8005422 <memmove+0x10>
 800542a:	bd10      	pop	{r4, pc}
 800542c:	5ccc      	ldrb	r4, [r1, r3]
 800542e:	54c4      	strb	r4, [r0, r3]
 8005430:	3301      	adds	r3, #1
 8005432:	429a      	cmp	r2, r3
 8005434:	d1fa      	bne.n	800542c <memmove+0x1a>
 8005436:	e7f8      	b.n	800542a <memmove+0x18>

08005438 <_free_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	0005      	movs	r5, r0
 800543c:	2900      	cmp	r1, #0
 800543e:	d010      	beq.n	8005462 <_free_r+0x2a>
 8005440:	1f0c      	subs	r4, r1, #4
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	da00      	bge.n	800544a <_free_r+0x12>
 8005448:	18e4      	adds	r4, r4, r3
 800544a:	0028      	movs	r0, r5
 800544c:	f000 f8d4 	bl	80055f8 <__malloc_lock>
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <_free_r+0x90>)
 8005452:	6813      	ldr	r3, [r2, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <_free_r+0x2c>
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	6014      	str	r4, [r2, #0]
 800545c:	0028      	movs	r0, r5
 800545e:	f000 f8cc 	bl	80055fa <__malloc_unlock>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	42a3      	cmp	r3, r4
 8005466:	d909      	bls.n	800547c <_free_r+0x44>
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	1860      	adds	r0, r4, r1
 800546c:	4283      	cmp	r3, r0
 800546e:	d1f3      	bne.n	8005458 <_free_r+0x20>
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1841      	adds	r1, r0, r1
 8005476:	6021      	str	r1, [r4, #0]
 8005478:	e7ee      	b.n	8005458 <_free_r+0x20>
 800547a:	0013      	movs	r3, r2
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	2a00      	cmp	r2, #0
 8005480:	d001      	beq.n	8005486 <_free_r+0x4e>
 8005482:	42a2      	cmp	r2, r4
 8005484:	d9f9      	bls.n	800547a <_free_r+0x42>
 8005486:	6819      	ldr	r1, [r3, #0]
 8005488:	1858      	adds	r0, r3, r1
 800548a:	42a0      	cmp	r0, r4
 800548c:	d10b      	bne.n	80054a6 <_free_r+0x6e>
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1809      	adds	r1, r1, r0
 8005492:	1858      	adds	r0, r3, r1
 8005494:	6019      	str	r1, [r3, #0]
 8005496:	4282      	cmp	r2, r0
 8005498:	d1e0      	bne.n	800545c <_free_r+0x24>
 800549a:	6810      	ldr	r0, [r2, #0]
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	1841      	adds	r1, r0, r1
 80054a0:	6019      	str	r1, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	e7da      	b.n	800545c <_free_r+0x24>
 80054a6:	42a0      	cmp	r0, r4
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x78>
 80054aa:	230c      	movs	r3, #12
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	e7d5      	b.n	800545c <_free_r+0x24>
 80054b0:	6821      	ldr	r1, [r4, #0]
 80054b2:	1860      	adds	r0, r4, r1
 80054b4:	4282      	cmp	r2, r0
 80054b6:	d103      	bne.n	80054c0 <_free_r+0x88>
 80054b8:	6810      	ldr	r0, [r2, #0]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	1841      	adds	r1, r0, r1
 80054be:	6021      	str	r1, [r4, #0]
 80054c0:	6062      	str	r2, [r4, #4]
 80054c2:	605c      	str	r4, [r3, #4]
 80054c4:	e7ca      	b.n	800545c <_free_r+0x24>
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	20001b00 	.word	0x20001b00

080054cc <_malloc_r>:
 80054cc:	2303      	movs	r3, #3
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	1ccd      	adds	r5, r1, #3
 80054d2:	439d      	bics	r5, r3
 80054d4:	3508      	adds	r5, #8
 80054d6:	0006      	movs	r6, r0
 80054d8:	2d0c      	cmp	r5, #12
 80054da:	d21e      	bcs.n	800551a <_malloc_r+0x4e>
 80054dc:	250c      	movs	r5, #12
 80054de:	42a9      	cmp	r1, r5
 80054e0:	d81d      	bhi.n	800551e <_malloc_r+0x52>
 80054e2:	0030      	movs	r0, r6
 80054e4:	f000 f888 	bl	80055f8 <__malloc_lock>
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <_malloc_r+0xb4>)
 80054ea:	6814      	ldr	r4, [r2, #0]
 80054ec:	0021      	movs	r1, r4
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d119      	bne.n	8005526 <_malloc_r+0x5a>
 80054f2:	4c24      	ldr	r4, [pc, #144]	; (8005584 <_malloc_r+0xb8>)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d103      	bne.n	8005502 <_malloc_r+0x36>
 80054fa:	0030      	movs	r0, r6
 80054fc:	f000 f86a 	bl	80055d4 <_sbrk_r>
 8005500:	6020      	str	r0, [r4, #0]
 8005502:	0029      	movs	r1, r5
 8005504:	0030      	movs	r0, r6
 8005506:	f000 f865 	bl	80055d4 <_sbrk_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d12b      	bne.n	8005566 <_malloc_r+0x9a>
 800550e:	230c      	movs	r3, #12
 8005510:	0030      	movs	r0, r6
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	f000 f871 	bl	80055fa <__malloc_unlock>
 8005518:	e003      	b.n	8005522 <_malloc_r+0x56>
 800551a:	2d00      	cmp	r5, #0
 800551c:	dadf      	bge.n	80054de <_malloc_r+0x12>
 800551e:	230c      	movs	r3, #12
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	2000      	movs	r0, #0
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	680b      	ldr	r3, [r1, #0]
 8005528:	1b5b      	subs	r3, r3, r5
 800552a:	d419      	bmi.n	8005560 <_malloc_r+0x94>
 800552c:	2b0b      	cmp	r3, #11
 800552e:	d903      	bls.n	8005538 <_malloc_r+0x6c>
 8005530:	600b      	str	r3, [r1, #0]
 8005532:	18cc      	adds	r4, r1, r3
 8005534:	6025      	str	r5, [r4, #0]
 8005536:	e003      	b.n	8005540 <_malloc_r+0x74>
 8005538:	684b      	ldr	r3, [r1, #4]
 800553a:	428c      	cmp	r4, r1
 800553c:	d10d      	bne.n	800555a <_malloc_r+0x8e>
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	0030      	movs	r0, r6
 8005542:	f000 f85a 	bl	80055fa <__malloc_unlock>
 8005546:	0020      	movs	r0, r4
 8005548:	2207      	movs	r2, #7
 800554a:	300b      	adds	r0, #11
 800554c:	1d23      	adds	r3, r4, #4
 800554e:	4390      	bics	r0, r2
 8005550:	1ac3      	subs	r3, r0, r3
 8005552:	d0e7      	beq.n	8005524 <_malloc_r+0x58>
 8005554:	425a      	negs	r2, r3
 8005556:	50e2      	str	r2, [r4, r3]
 8005558:	e7e4      	b.n	8005524 <_malloc_r+0x58>
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	000c      	movs	r4, r1
 800555e:	e7ef      	b.n	8005540 <_malloc_r+0x74>
 8005560:	000c      	movs	r4, r1
 8005562:	6849      	ldr	r1, [r1, #4]
 8005564:	e7c3      	b.n	80054ee <_malloc_r+0x22>
 8005566:	2303      	movs	r3, #3
 8005568:	1cc4      	adds	r4, r0, #3
 800556a:	439c      	bics	r4, r3
 800556c:	42a0      	cmp	r0, r4
 800556e:	d0e1      	beq.n	8005534 <_malloc_r+0x68>
 8005570:	1a21      	subs	r1, r4, r0
 8005572:	0030      	movs	r0, r6
 8005574:	f000 f82e 	bl	80055d4 <_sbrk_r>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d1db      	bne.n	8005534 <_malloc_r+0x68>
 800557c:	e7c7      	b.n	800550e <_malloc_r+0x42>
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	20001b00 	.word	0x20001b00
 8005584:	20001b04 	.word	0x20001b04

08005588 <_realloc_r>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	0007      	movs	r7, r0
 800558c:	000d      	movs	r5, r1
 800558e:	0016      	movs	r6, r2
 8005590:	2900      	cmp	r1, #0
 8005592:	d105      	bne.n	80055a0 <_realloc_r+0x18>
 8005594:	0011      	movs	r1, r2
 8005596:	f7ff ff99 	bl	80054cc <_malloc_r>
 800559a:	0004      	movs	r4, r0
 800559c:	0020      	movs	r0, r4
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	2a00      	cmp	r2, #0
 80055a2:	d103      	bne.n	80055ac <_realloc_r+0x24>
 80055a4:	f7ff ff48 	bl	8005438 <_free_r>
 80055a8:	0034      	movs	r4, r6
 80055aa:	e7f7      	b.n	800559c <_realloc_r+0x14>
 80055ac:	f000 f826 	bl	80055fc <_malloc_usable_size_r>
 80055b0:	002c      	movs	r4, r5
 80055b2:	42b0      	cmp	r0, r6
 80055b4:	d2f2      	bcs.n	800559c <_realloc_r+0x14>
 80055b6:	0031      	movs	r1, r6
 80055b8:	0038      	movs	r0, r7
 80055ba:	f7ff ff87 	bl	80054cc <_malloc_r>
 80055be:	1e04      	subs	r4, r0, #0
 80055c0:	d0ec      	beq.n	800559c <_realloc_r+0x14>
 80055c2:	0029      	movs	r1, r5
 80055c4:	0032      	movs	r2, r6
 80055c6:	f7ff fb59 	bl	8004c7c <memcpy>
 80055ca:	0029      	movs	r1, r5
 80055cc:	0038      	movs	r0, r7
 80055ce:	f7ff ff33 	bl	8005438 <_free_r>
 80055d2:	e7e3      	b.n	800559c <_realloc_r+0x14>

080055d4 <_sbrk_r>:
 80055d4:	2300      	movs	r3, #0
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	4c06      	ldr	r4, [pc, #24]	; (80055f4 <_sbrk_r+0x20>)
 80055da:	0005      	movs	r5, r0
 80055dc:	0008      	movs	r0, r1
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	f7fb f8b2 	bl	8000748 <_sbrk>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d103      	bne.n	80055f0 <_sbrk_r+0x1c>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d000      	beq.n	80055f0 <_sbrk_r+0x1c>
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	20001c80 	.word	0x20001c80

080055f8 <__malloc_lock>:
 80055f8:	4770      	bx	lr

080055fa <__malloc_unlock>:
 80055fa:	4770      	bx	lr

080055fc <_malloc_usable_size_r>:
 80055fc:	1f0b      	subs	r3, r1, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1f18      	subs	r0, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	da01      	bge.n	800560a <_malloc_usable_size_r+0xe>
 8005606:	580b      	ldr	r3, [r1, r0]
 8005608:	18c0      	adds	r0, r0, r3
 800560a:	4770      	bx	lr

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
